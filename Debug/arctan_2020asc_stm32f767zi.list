
arctan_2020asc_stm32f767zi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f54  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08005154  08005154  00015154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005314  08005314  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800531c  0800531c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800531c  0800531c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005320  08005320  00015320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005324  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000070  08005394  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005394  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2c8  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aed  00000000  00000000  0002a366  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000870  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0002c6c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000263fa  00000000  00000000  0002ce50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b95  00000000  00000000  0005324a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ec8ca  00000000  00000000  0005bddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001486a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b0  00000000  00000000  00148724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	0800513c 	.word	0x0800513c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	0800513c 	.word	0x0800513c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005f4:	2003      	movs	r0, #3
 80005f6:	f000 f929 	bl	800084c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 f806 	bl	800060c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000600:	f004 f800 	bl	8004604 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <HAL_InitTick+0x54>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_InitTick+0x58>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f972 	bl	8000914 <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000636:	2301      	movs	r3, #1
 8000638:	e00e      	b.n	8000658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	2b0f      	cmp	r3, #15
 800063e:	d80a      	bhi.n	8000656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000640:	2200      	movs	r2, #0
 8000642:	6879      	ldr	r1, [r7, #4]
 8000644:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000648:	f000 f920 	bl	800088c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800064c:	4a06      	ldr	r2, [pc, #24]	; (8000668 <HAL_InitTick+0x5c>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000652:	2300      	movs	r3, #0
 8000654:	e000      	b.n	8000658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000008 	.word	0x20000008
 8000664:	20000004 	.word	0x20000004
 8000668:	20000000 	.word	0x20000000

0800066c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_IncTick+0x20>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	461a      	mov	r2, r3
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x24>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4413      	add	r3, r2
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <HAL_IncTick+0x24>)
 800067e:	6013      	str	r3, [r2, #0]
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	20000004 	.word	0x20000004
 8000690:	20000098 	.word	0x20000098

08000694 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  return uwTick;
 8000698:	4b03      	ldr	r3, [pc, #12]	; (80006a8 <HAL_GetTick+0x14>)
 800069a:	681b      	ldr	r3, [r3, #0]
}
 800069c:	4618      	mov	r0, r3
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000098 	.word	0x20000098

080006ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	4313      	orrs	r3, r2
 80006d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006da:	4a04      	ldr	r2, [pc, #16]	; (80006ec <__NVIC_SetPriorityGrouping+0x40>)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	60d3      	str	r3, [r2, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3714      	adds	r7, #20
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	05fa0000 	.word	0x05fa0000

080006f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <__NVIC_GetPriorityGrouping+0x18>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	0a1b      	lsrs	r3, r3, #8
 80006fe:	f003 0307 	and.w	r3, r3, #7
}
 8000702:	4618      	mov	r0, r3
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db0b      	blt.n	800073a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	f003 021f 	and.w	r2, r3, #31
 8000728:	4907      	ldr	r1, [pc, #28]	; (8000748 <__NVIC_EnableIRQ+0x38>)
 800072a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072e:	095b      	lsrs	r3, r3, #5
 8000730:	2001      	movs	r0, #1
 8000732:	fa00 f202 	lsl.w	r2, r0, r2
 8000736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	e000e100 	.word	0xe000e100

0800074c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	6039      	str	r1, [r7, #0]
 8000756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075c:	2b00      	cmp	r3, #0
 800075e:	db0a      	blt.n	8000776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2da      	uxtb	r2, r3
 8000764:	490c      	ldr	r1, [pc, #48]	; (8000798 <__NVIC_SetPriority+0x4c>)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	0112      	lsls	r2, r2, #4
 800076c:	b2d2      	uxtb	r2, r2
 800076e:	440b      	add	r3, r1
 8000770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000774:	e00a      	b.n	800078c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	b2da      	uxtb	r2, r3
 800077a:	4908      	ldr	r1, [pc, #32]	; (800079c <__NVIC_SetPriority+0x50>)
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	3b04      	subs	r3, #4
 8000784:	0112      	lsls	r2, r2, #4
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	440b      	add	r3, r1
 800078a:	761a      	strb	r2, [r3, #24]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000e100 	.word	0xe000e100
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f003 0307 	and.w	r3, r3, #7
 80007b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	f1c3 0307 	rsb	r3, r3, #7
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	bf28      	it	cs
 80007be:	2304      	movcs	r3, #4
 80007c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d902      	bls.n	80007d0 <NVIC_EncodePriority+0x30>
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3b03      	subs	r3, #3
 80007ce:	e000      	b.n	80007d2 <NVIC_EncodePriority+0x32>
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	43da      	mvns	r2, r3
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	401a      	ands	r2, r3
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	fa01 f303 	lsl.w	r3, r1, r3
 80007f2:	43d9      	mvns	r1, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007f8:	4313      	orrs	r3, r2
         );
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3724      	adds	r7, #36	; 0x24
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
	...

08000808 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	3b01      	subs	r3, #1
 8000814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000818:	d301      	bcc.n	800081e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800081a:	2301      	movs	r3, #1
 800081c:	e00f      	b.n	800083e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <SysTick_Config+0x40>)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3b01      	subs	r3, #1
 8000824:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000826:	210f      	movs	r1, #15
 8000828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800082c:	f7ff ff8e 	bl	800074c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <SysTick_Config+0x40>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <SysTick_Config+0x40>)
 8000838:	2207      	movs	r2, #7
 800083a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800083c:	2300      	movs	r3, #0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000e010 	.word	0xe000e010

0800084c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b07      	cmp	r3, #7
 8000858:	d00f      	beq.n	800087a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b06      	cmp	r3, #6
 800085e:	d00c      	beq.n	800087a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b05      	cmp	r3, #5
 8000864:	d009      	beq.n	800087a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b04      	cmp	r3, #4
 800086a:	d006      	beq.n	800087a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d003      	beq.n	800087a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000872:	2192      	movs	r1, #146	; 0x92
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000876:	f003 feba 	bl	80045ee <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff16 	bl	80006ac <__NVIC_SetPriorityGrouping>
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08005154 	.word	0x08005154

0800088c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800089a:	2300      	movs	r3, #0
 800089c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d903      	bls.n	80008ac <HAL_NVIC_SetPriority+0x20>
 80008a4:	21aa      	movs	r1, #170	; 0xaa
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <HAL_NVIC_SetPriority+0x54>)
 80008a8:	f003 fea1 	bl	80045ee <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b0f      	cmp	r3, #15
 80008b0:	d903      	bls.n	80008ba <HAL_NVIC_SetPriority+0x2e>
 80008b2:	21ab      	movs	r1, #171	; 0xab
 80008b4:	480a      	ldr	r0, [pc, #40]	; (80008e0 <HAL_NVIC_SetPriority+0x54>)
 80008b6:	f003 fe9a 	bl	80045ee <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008ba:	f7ff ff1b 	bl	80006f4 <__NVIC_GetPriorityGrouping>
 80008be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	68b9      	ldr	r1, [r7, #8]
 80008c4:	6978      	ldr	r0, [r7, #20]
 80008c6:	f7ff ff6b 	bl	80007a0 <NVIC_EncodePriority>
 80008ca:	4602      	mov	r2, r0
 80008cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d0:	4611      	mov	r1, r2
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff3a 	bl	800074c <__NVIC_SetPriority>
}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	08005154 	.word	0x08005154

080008e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80008ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	da03      	bge.n	80008fe <HAL_NVIC_EnableIRQ+0x1a>
 80008f6:	21be      	movs	r1, #190	; 0xbe
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <HAL_NVIC_EnableIRQ+0x2c>)
 80008fa:	f003 fe78 	bl	80045ee <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff ff04 	bl	8000710 <__NVIC_EnableIRQ>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08005154 	.word	0x08005154

08000914 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800091c:	6878      	ldr	r0, [r7, #4]
 800091e:	f7ff ff73 	bl	8000808 <SysTick_Config>
 8000922:	4603      	mov	r3, r0
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800093a:	b2db      	uxtb	r3, r3
 800093c:	2b02      	cmp	r3, #2
 800093e:	d004      	beq.n	800094a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2280      	movs	r2, #128	; 0x80
 8000944:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00c      	b.n	8000964 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2205      	movs	r2, #5
 800094e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f022 0201 	bic.w	r2, r2, #1
 8000960:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	4618      	mov	r0, r3
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000986:	2300      	movs	r3, #0
 8000988:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a42      	ldr	r2, [pc, #264]	; (8000a98 <HAL_GPIO_Init+0x128>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d02b      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a41      	ldr	r2, [pc, #260]	; (8000a9c <HAL_GPIO_Init+0x12c>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d027      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a40      	ldr	r2, [pc, #256]	; (8000aa0 <HAL_GPIO_Init+0x130>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d023      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a3f      	ldr	r2, [pc, #252]	; (8000aa4 <HAL_GPIO_Init+0x134>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d01f      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a3e      	ldr	r2, [pc, #248]	; (8000aa8 <HAL_GPIO_Init+0x138>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d01b      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a3d      	ldr	r2, [pc, #244]	; (8000aac <HAL_GPIO_Init+0x13c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d017      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a3c      	ldr	r2, [pc, #240]	; (8000ab0 <HAL_GPIO_Init+0x140>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d013      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a3b      	ldr	r2, [pc, #236]	; (8000ab4 <HAL_GPIO_Init+0x144>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d00f      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <HAL_GPIO_Init+0x148>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d00b      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	4a39      	ldr	r2, [pc, #228]	; (8000abc <HAL_GPIO_Init+0x14c>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d007      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a38      	ldr	r2, [pc, #224]	; (8000ac0 <HAL_GPIO_Init+0x150>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d003      	beq.n	80009ea <HAL_GPIO_Init+0x7a>
 80009e2:	21b1      	movs	r1, #177	; 0xb1
 80009e4:	4837      	ldr	r0, [pc, #220]	; (8000ac4 <HAL_GPIO_Init+0x154>)
 80009e6:	f003 fe02 	bl	80045ee <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <HAL_GPIO_Init+0x8c>
 80009f4:	21b2      	movs	r1, #178	; 0xb2
 80009f6:	4833      	ldr	r0, [pc, #204]	; (8000ac4 <HAL_GPIO_Init+0x154>)
 80009f8:	f003 fdf9 	bl	80045ee <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d035      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d031      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	2b11      	cmp	r3, #17
 8000a12:	d02d      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d029      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	2b12      	cmp	r3, #18
 8000a22:	d025      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4a27      	ldr	r2, [pc, #156]	; (8000ac8 <HAL_GPIO_Init+0x158>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d020      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685b      	ldr	r3, [r3, #4]
 8000a32:	4a26      	ldr	r2, [pc, #152]	; (8000acc <HAL_GPIO_Init+0x15c>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d01b      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	4a24      	ldr	r2, [pc, #144]	; (8000ad0 <HAL_GPIO_Init+0x160>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d016      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <HAL_GPIO_Init+0x164>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d011      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	4a21      	ldr	r2, [pc, #132]	; (8000ad8 <HAL_GPIO_Init+0x168>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d00c      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	4a20      	ldr	r2, [pc, #128]	; (8000adc <HAL_GPIO_Init+0x16c>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d007      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x100>
 8000a68:	21b3      	movs	r1, #179	; 0xb3
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <HAL_GPIO_Init+0x154>)
 8000a6c:	f003 fdbf 	bl	80045ee <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d00b      	beq.n	8000a90 <HAL_GPIO_Init+0x120>
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d007      	beq.n	8000a90 <HAL_GPIO_Init+0x120>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x120>
 8000a88:	21b4      	movs	r1, #180	; 0xb4
 8000a8a:	480e      	ldr	r0, [pc, #56]	; (8000ac4 <HAL_GPIO_Init+0x154>)
 8000a8c:	f003 fdaf 	bl	80045ee <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	e2e9      	b.n	800106a <HAL_GPIO_Init+0x6fa>
 8000a96:	bf00      	nop
 8000a98:	40020000 	.word	0x40020000
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	40021400 	.word	0x40021400
 8000ab0:	40021800 	.word	0x40021800
 8000ab4:	40021c00 	.word	0x40021c00
 8000ab8:	40022000 	.word	0x40022000
 8000abc:	40022400 	.word	0x40022400
 8000ac0:	40022800 	.word	0x40022800
 8000ac4:	08005190 	.word	0x08005190
 8000ac8:	10110000 	.word	0x10110000
 8000acc:	10210000 	.word	0x10210000
 8000ad0:	10310000 	.word	0x10310000
 8000ad4:	10120000 	.word	0x10120000
 8000ad8:	10220000 	.word	0x10220000
 8000adc:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 82b3 	bne.w	8001064 <HAL_GPIO_Init+0x6f4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d004      	beq.n	8000b10 <HAL_GPIO_Init+0x1a0>
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	2b12      	cmp	r3, #18
 8000b0c:	f040 8143 	bne.w	8000d96 <HAL_GPIO_Init+0x426>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	f000 811a 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	691b      	ldr	r3, [r3, #16]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	f000 8115 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	691b      	ldr	r3, [r3, #16]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	f000 8110 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 810b 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	691b      	ldr	r3, [r3, #16]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f000 8106 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	f000 8101 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	691b      	ldr	r3, [r3, #16]
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	f000 80fc 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	691b      	ldr	r3, [r3, #16]
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	f000 80f7 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	f000 80f2 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	691b      	ldr	r3, [r3, #16]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	f000 80ed 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	f000 80e8 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	f000 80e3 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	691b      	ldr	r3, [r3, #16]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	f000 80de 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	691b      	ldr	r3, [r3, #16]
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	f000 80d9 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	691b      	ldr	r3, [r3, #16]
 8000ba0:	2b03      	cmp	r3, #3
 8000ba2:	f000 80d4 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	691b      	ldr	r3, [r3, #16]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	f000 80cf 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	f000 80ca 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	f000 80c5 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	691b      	ldr	r3, [r3, #16]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	f000 80c0 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	691b      	ldr	r3, [r3, #16]
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	f000 80bb 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	2b05      	cmp	r3, #5
 8000bde:	f000 80b6 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691b      	ldr	r3, [r3, #16]
 8000be6:	2b05      	cmp	r3, #5
 8000be8:	f000 80b1 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	2b05      	cmp	r3, #5
 8000bf2:	f000 80ac 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	691b      	ldr	r3, [r3, #16]
 8000bfa:	2b05      	cmp	r3, #5
 8000bfc:	f000 80a7 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	2b05      	cmp	r3, #5
 8000c06:	f000 80a2 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b05      	cmp	r3, #5
 8000c10:	f000 809d 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	2b06      	cmp	r3, #6
 8000c1a:	f000 8098 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	691b      	ldr	r3, [r3, #16]
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	f000 8093 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	2b07      	cmp	r3, #7
 8000c2e:	f000 808e 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	691b      	ldr	r3, [r3, #16]
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	f000 8089 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	691b      	ldr	r3, [r3, #16]
 8000c40:	2b07      	cmp	r3, #7
 8000c42:	f000 8084 	beq.w	8000d4e <HAL_GPIO_Init+0x3de>
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	2b07      	cmp	r3, #7
 8000c4c:	d07f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	691b      	ldr	r3, [r3, #16]
 8000c52:	2b07      	cmp	r3, #7
 8000c54:	d07b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	691b      	ldr	r3, [r3, #16]
 8000c5a:	2b07      	cmp	r3, #7
 8000c5c:	d077      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	691b      	ldr	r3, [r3, #16]
 8000c62:	2b07      	cmp	r3, #7
 8000c64:	d073      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	2b08      	cmp	r3, #8
 8000c6c:	d06f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	691b      	ldr	r3, [r3, #16]
 8000c72:	2b08      	cmp	r3, #8
 8000c74:	d06b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d067      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	691b      	ldr	r3, [r3, #16]
 8000c82:	2b08      	cmp	r3, #8
 8000c84:	d063      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	691b      	ldr	r3, [r3, #16]
 8000c8a:	2b08      	cmp	r3, #8
 8000c8c:	d05f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	691b      	ldr	r3, [r3, #16]
 8000c92:	2b08      	cmp	r3, #8
 8000c94:	d05b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	691b      	ldr	r3, [r3, #16]
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d057      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	2b09      	cmp	r3, #9
 8000ca4:	d053      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691b      	ldr	r3, [r3, #16]
 8000caa:	2b09      	cmp	r3, #9
 8000cac:	d04f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	2b09      	cmp	r3, #9
 8000cb4:	d04b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	691b      	ldr	r3, [r3, #16]
 8000cba:	2b09      	cmp	r3, #9
 8000cbc:	d047      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	2b09      	cmp	r3, #9
 8000cc4:	d043      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b09      	cmp	r3, #9
 8000ccc:	d03f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	2b0a      	cmp	r3, #10
 8000cd4:	d03b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	2b09      	cmp	r3, #9
 8000cdc:	d037      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	2b0a      	cmp	r3, #10
 8000ce4:	d033      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	691b      	ldr	r3, [r3, #16]
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d02f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	691b      	ldr	r3, [r3, #16]
 8000cf2:	2b0a      	cmp	r3, #10
 8000cf4:	d02b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	2b0b      	cmp	r3, #11
 8000cfc:	d027      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	691b      	ldr	r3, [r3, #16]
 8000d02:	2b0a      	cmp	r3, #10
 8000d04:	d023      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	2b0b      	cmp	r3, #11
 8000d0c:	d01f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	2b0b      	cmp	r3, #11
 8000d14:	d01b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	691b      	ldr	r3, [r3, #16]
 8000d1a:	2b0c      	cmp	r3, #12
 8000d1c:	d017      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	691b      	ldr	r3, [r3, #16]
 8000d22:	2b0c      	cmp	r3, #12
 8000d24:	d013      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	691b      	ldr	r3, [r3, #16]
 8000d2a:	2b0c      	cmp	r3, #12
 8000d2c:	d00f      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b0f      	cmp	r3, #15
 8000d34:	d00b      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	691b      	ldr	r3, [r3, #16]
 8000d3a:	2b0d      	cmp	r3, #13
 8000d3c:	d007      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	2b0e      	cmp	r3, #14
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_Init+0x3de>
 8000d46:	21c5      	movs	r1, #197	; 0xc5
 8000d48:	4887      	ldr	r0, [pc, #540]	; (8000f68 <HAL_GPIO_Init+0x5f8>)
 8000d4a:	f003 fc50 	bl	80045ee <assert_failed>
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	08da      	lsrs	r2, r3, #3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	3208      	adds	r2, #8
 8000d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	220f      	movs	r2, #15
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	691a      	ldr	r2, [r3, #16]
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	f003 0307 	and.w	r3, r3, #7
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	4313      	orrs	r3, r2
 8000d86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	08da      	lsrs	r2, r3, #3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3208      	adds	r2, #8
 8000d90:	69b9      	ldr	r1, [r7, #24]
 8000d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43db      	mvns	r3, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4013      	ands	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0203 	and.w	r2, r3, #3
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d00b      	beq.n	8000dea <HAL_GPIO_Init+0x47a>
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d007      	beq.n	8000dea <HAL_GPIO_Init+0x47a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dde:	2b11      	cmp	r3, #17
 8000de0:	d003      	beq.n	8000dea <HAL_GPIO_Init+0x47a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b12      	cmp	r3, #18
 8000de8:	d144      	bne.n	8000e74 <HAL_GPIO_Init+0x504>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d00f      	beq.n	8000e12 <HAL_GPIO_Init+0x4a2>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d00b      	beq.n	8000e12 <HAL_GPIO_Init+0x4a2>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d007      	beq.n	8000e12 <HAL_GPIO_Init+0x4a2>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d003      	beq.n	8000e12 <HAL_GPIO_Init+0x4a2>
 8000e0a:	21d9      	movs	r1, #217	; 0xd9
 8000e0c:	4856      	ldr	r0, [pc, #344]	; (8000f68 <HAL_GPIO_Init+0x5f8>)
 8000e0e:	f003 fbee 	bl	80045ee <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e18:	69fb      	ldr	r3, [r7, #28]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4013      	ands	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	68da      	ldr	r2, [r3, #12]
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e48:	2201      	movs	r2, #1
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	f003 0201 	and.w	r2, r3, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80d9 	beq.w	8001064 <HAL_GPIO_Init+0x6f4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <HAL_GPIO_Init+0x5fc>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	4a2d      	ldr	r2, [pc, #180]	; (8000f6c <HAL_GPIO_Init+0x5fc>)
 8000eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8000ebe:	4b2b      	ldr	r3, [pc, #172]	; (8000f6c <HAL_GPIO_Init+0x5fc>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000eca:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <HAL_GPIO_Init+0x600>)
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	089b      	lsrs	r3, r3, #2
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	220f      	movs	r2, #15
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4013      	ands	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a20      	ldr	r2, [pc, #128]	; (8000f74 <HAL_GPIO_Init+0x604>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d052      	beq.n	8000f9c <HAL_GPIO_Init+0x62c>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	; (8000f78 <HAL_GPIO_Init+0x608>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d031      	beq.n	8000f62 <HAL_GPIO_Init+0x5f2>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <HAL_GPIO_Init+0x60c>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d02b      	beq.n	8000f5e <HAL_GPIO_Init+0x5ee>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <HAL_GPIO_Init+0x610>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d025      	beq.n	8000f5a <HAL_GPIO_Init+0x5ea>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a1c      	ldr	r2, [pc, #112]	; (8000f84 <HAL_GPIO_Init+0x614>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d01f      	beq.n	8000f56 <HAL_GPIO_Init+0x5e6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <HAL_GPIO_Init+0x618>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d019      	beq.n	8000f52 <HAL_GPIO_Init+0x5e2>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <HAL_GPIO_Init+0x61c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d013      	beq.n	8000f4e <HAL_GPIO_Init+0x5de>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <HAL_GPIO_Init+0x620>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d00d      	beq.n	8000f4a <HAL_GPIO_Init+0x5da>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <HAL_GPIO_Init+0x624>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d007      	beq.n	8000f46 <HAL_GPIO_Init+0x5d6>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <HAL_GPIO_Init+0x628>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d101      	bne.n	8000f42 <HAL_GPIO_Init+0x5d2>
 8000f3e:	2309      	movs	r3, #9
 8000f40:	e02d      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f42:	230a      	movs	r3, #10
 8000f44:	e02b      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f46:	2308      	movs	r3, #8
 8000f48:	e029      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e027      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e025      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e023      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e021      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	e01f      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f5e:	2302      	movs	r3, #2
 8000f60:	e01d      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f62:	2301      	movs	r3, #1
 8000f64:	e01b      	b.n	8000f9e <HAL_GPIO_Init+0x62e>
 8000f66:	bf00      	nop
 8000f68:	08005190 	.word	0x08005190
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40013800 	.word	0x40013800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020c00 	.word	0x40020c00
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40021400 	.word	0x40021400
 8000f8c:	40021800 	.word	0x40021800
 8000f90:	40021c00 	.word	0x40021c00
 8000f94:	40022000 	.word	0x40022000
 8000f98:	40022400 	.word	0x40022400
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	69fa      	ldr	r2, [r7, #28]
 8000fa0:	f002 0203 	and.w	r2, r2, #3
 8000fa4:	0092      	lsls	r2, r2, #2
 8000fa6:	4093      	lsls	r3, r2
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fae:	4933      	ldr	r1, [pc, #204]	; (800107c <HAL_GPIO_Init+0x70c>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fbc:	4b30      	ldr	r3, [pc, #192]	; (8001080 <HAL_GPIO_Init+0x710>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x670>
        {
          temp |= iocurrent;
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <HAL_GPIO_Init+0x710>)
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <HAL_GPIO_Init+0x710>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x69a>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100a:	4a1d      	ldr	r2, [pc, #116]	; (8001080 <HAL_GPIO_Init+0x710>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001010:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_GPIO_Init+0x710>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x6c4>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001034:	4a12      	ldr	r2, [pc, #72]	; (8001080 <HAL_GPIO_Init+0x710>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_GPIO_Init+0x710>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x6ee>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_GPIO_Init+0x710>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	2b0f      	cmp	r3, #15
 800106e:	f67f ad37 	bls.w	8000ae0 <HAL_GPIO_Init+0x170>
      }
    }
  }
}
 8001072:	bf00      	nop
 8001074:	3720      	adds	r7, #32
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40013800 	.word	0x40013800
 8001080:	40013c00 	.word	0x40013c00

08001084 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800108e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40007000 	.word	0x40007000

080010a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b23      	ldr	r3, [pc, #140]	; (800113c <HAL_PWREx_EnableOverDrive+0x98>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	4a22      	ldr	r2, [pc, #136]	; (800113c <HAL_PWREx_EnableOverDrive+0x98>)
 80010b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ba:	4b20      	ldr	r3, [pc, #128]	; (800113c <HAL_PWREx_EnableOverDrive+0x98>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80010c6:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010d2:	f7ff fadf 	bl	8000694 <HAL_GetTick>
 80010d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010d8:	e009      	b.n	80010ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80010da:	f7ff fadb 	bl	8000694 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010e8:	d901      	bls.n	80010ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e022      	b.n	8001134 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010fa:	d1ee      	bne.n	80010da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80010fc:	4b10      	ldr	r3, [pc, #64]	; (8001140 <HAL_PWREx_EnableOverDrive+0x9c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001106:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001108:	f7ff fac4 	bl	8000694 <HAL_GetTick>
 800110c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800110e:	e009      	b.n	8001124 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001110:	f7ff fac0 	bl	8000694 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800111e:	d901      	bls.n	8001124 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e007      	b.n	8001134 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800112c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001130:	d1ee      	bne.n	8001110 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e324      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2b0f      	cmp	r3, #15
 8001160:	d904      	bls.n	800116c <HAL_RCC_OscConfig+0x28>
 8001162:	f44f 71b2 	mov.w	r1, #356	; 0x164
 8001166:	4892      	ldr	r0, [pc, #584]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 8001168:	f003 fa41 	bl	80045ee <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 809a 	beq.w	80012ae <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00e      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800118a:	d009      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5c>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001194:	d004      	beq.n	80011a0 <HAL_RCC_OscConfig+0x5c>
 8001196:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800119a:	4885      	ldr	r0, [pc, #532]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 800119c:	f003 fa27 	bl	80045ee <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011a0:	4b84      	ldr	r3, [pc, #528]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d00c      	beq.n	80011c6 <HAL_RCC_OscConfig+0x82>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ac:	4b81      	ldr	r3, [pc, #516]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	f003 030c 	and.w	r3, r3, #12
 80011b4:	2b08      	cmp	r3, #8
 80011b6:	d112      	bne.n	80011de <HAL_RCC_OscConfig+0x9a>
 80011b8:	4b7e      	ldr	r3, [pc, #504]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011c4:	d10b      	bne.n	80011de <HAL_RCC_OscConfig+0x9a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c6:	4b7b      	ldr	r3, [pc, #492]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d06c      	beq.n	80012ac <HAL_RCC_OscConfig+0x168>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d168      	bne.n	80012ac <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e2e2      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e6:	d106      	bne.n	80011f6 <HAL_RCC_OscConfig+0xb2>
 80011e8:	4b72      	ldr	r3, [pc, #456]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a71      	ldr	r2, [pc, #452]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80011ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e02e      	b.n	8001254 <HAL_RCC_OscConfig+0x110>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d10c      	bne.n	8001218 <HAL_RCC_OscConfig+0xd4>
 80011fe:	4b6d      	ldr	r3, [pc, #436]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a6c      	ldr	r2, [pc, #432]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a69      	ldr	r2, [pc, #420]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001210:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0x110>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0xf8>
 8001222:	4b64      	ldr	r3, [pc, #400]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a63      	ldr	r2, [pc, #396]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a60      	ldr	r2, [pc, #384]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0x110>
 800123c:	4b5d      	ldr	r3, [pc, #372]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a5c      	ldr	r2, [pc, #368]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b5a      	ldr	r3, [pc, #360]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a59      	ldr	r2, [pc, #356]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fa1a 	bl	8000694 <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fa16 	bl	8000694 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e296      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001276:	4b4f      	ldr	r3, [pc, #316]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x120>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fa06 	bl	8000694 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x15a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fa02 	bl	8000694 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e282      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800129e:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0x148>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x16a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 8084 	beq.w	80013c4 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d008      	beq.n	80012d6 <HAL_RCC_OscConfig+0x192>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d004      	beq.n	80012d6 <HAL_RCC_OscConfig+0x192>
 80012cc:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 80012d0:	4837      	ldr	r0, [pc, #220]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	f003 f98c 	bl	80045ee <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	691b      	ldr	r3, [r3, #16]
 80012da:	2b1f      	cmp	r3, #31
 80012dc:	d904      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1a4>
 80012de:	f240 119d 	movw	r1, #413	; 0x19d
 80012e2:	4833      	ldr	r0, [pc, #204]	; (80013b0 <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f003 f983 	bl	80045ee <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80012ea:	689b      	ldr	r3, [r3, #8]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <HAL_RCC_OscConfig+0x1c8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f4:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d11c      	bne.n	800133a <HAL_RCC_OscConfig+0x1f6>
 8001300:	4b2c      	ldr	r3, [pc, #176]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d116      	bne.n	800133a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d005      	beq.n	8001324 <HAL_RCC_OscConfig+0x1e0>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d001      	beq.n	8001324 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e23f      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4920      	ldr	r1, [pc, #128]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001338:	e044      	b.n	80013c4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d023      	beq.n	800138a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001342:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a1b      	ldr	r2, [pc, #108]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff f9a1 	bl	8000694 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x224>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff f99d 	bl	8000694 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e21d      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0f0      	beq.n	8001356 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	490c      	ldr	r1, [pc, #48]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
 8001388:	e01c      	b.n	80013c4 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <HAL_RCC_OscConfig+0x270>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001396:	f7ff f97d 	bl	8000694 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139c:	e00c      	b.n	80013b8 <HAL_RCC_OscConfig+0x274>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff f979 	bl	8000694 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d905      	bls.n	80013b8 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1f9      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
 80013b0:	080051cc 	.word	0x080051cc
 80013b4:	40023800 	.word	0x40023800
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b8:	4b7e      	ldr	r3, [pc, #504]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1ec      	bne.n	800139e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d043      	beq.n	8001458 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_OscConfig+0x2a6>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d004      	beq.n	80013ea <HAL_RCC_OscConfig+0x2a6>
 80013e0:	f240 11dd 	movw	r1, #477	; 0x1dd
 80013e4:	4874      	ldr	r0, [pc, #464]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 80013e6:	f003 f902 	bl	80045ee <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d019      	beq.n	8001426 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b70      	ldr	r3, [pc, #448]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f6:	4a6f      	ldr	r2, [pc, #444]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff f949 	bl	8000694 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff f945 	bl	8000694 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1c5      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001418:	4b66      	ldr	r3, [pc, #408]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2c2>
 8001424:	e018      	b.n	8001458 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	4b63      	ldr	r3, [pc, #396]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	4a62      	ldr	r2, [pc, #392]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff f92f 	bl	8000694 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x308>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff f92b 	bl	8000694 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1ab      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800144c:	4b59      	ldr	r3, [pc, #356]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800144e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f0      	bne.n	800143a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80bc 	beq.w	80015de <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00c      	beq.n	8001488 <HAL_RCC_OscConfig+0x344>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d008      	beq.n	8001488 <HAL_RCC_OscConfig+0x344>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	2b05      	cmp	r3, #5
 800147c:	d004      	beq.n	8001488 <HAL_RCC_OscConfig+0x344>
 800147e:	f240 2107 	movw	r1, #519	; 0x207
 8001482:	484d      	ldr	r0, [pc, #308]	; (80015b8 <HAL_RCC_OscConfig+0x474>)
 8001484:	f003 f8b3 	bl	80045ee <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001488:	4b4a      	ldr	r3, [pc, #296]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d10d      	bne.n	80014b0 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	4b47      	ldr	r3, [pc, #284]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	4a46      	ldr	r2, [pc, #280]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800149a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149e:	6413      	str	r3, [r2, #64]	; 0x40
 80014a0:	4b44      	ldr	r3, [pc, #272]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014ac:	2301      	movs	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b0:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d118      	bne.n	80014ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014bc:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a3e      	ldr	r2, [pc, #248]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 80014c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c8:	f7ff f8e4 	bl	8000694 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80014d0:	f7ff f8e0 	bl	8000694 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b64      	cmp	r3, #100	; 0x64
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e160      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014e2:	4b36      	ldr	r3, [pc, #216]	; (80015bc <HAL_RCC_OscConfig+0x478>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x3c0>
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	e02d      	b.n	8001560 <HAL_RCC_OscConfig+0x41c>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x3e2>
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a28      	ldr	r2, [pc, #160]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a25      	ldr	r2, [pc, #148]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800151e:	f023 0304 	bic.w	r3, r3, #4
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e01c      	b.n	8001560 <HAL_RCC_OscConfig+0x41c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b05      	cmp	r3, #5
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x404>
 800152e:	4b21      	ldr	r3, [pc, #132]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001532:	4a20      	ldr	r2, [pc, #128]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6713      	str	r3, [r2, #112]	; 0x70
 800153a:	4b1e      	ldr	r3, [pc, #120]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153e:	4a1d      	ldr	r2, [pc, #116]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6713      	str	r3, [r2, #112]	; 0x70
 8001546:	e00b      	b.n	8001560 <HAL_RCC_OscConfig+0x41c>
 8001548:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800154e:	f023 0301 	bic.w	r3, r3, #1
 8001552:	6713      	str	r3, [r2, #112]	; 0x70
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001558:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 800155a:	f023 0304 	bic.w	r3, r3, #4
 800155e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d015      	beq.n	8001594 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001568:	f7ff f894 	bl	8000694 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156e:	e00a      	b.n	8001586 <HAL_RCC_OscConfig+0x442>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff f890 	bl	8000694 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e10e      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0ee      	beq.n	8001570 <HAL_RCC_OscConfig+0x42c>
 8001592:	e01b      	b.n	80015cc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001594:	f7ff f87e 	bl	8000694 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159a:	e011      	b.n	80015c0 <HAL_RCC_OscConfig+0x47c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800159c:	f7ff f87a 	bl	8000694 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d908      	bls.n	80015c0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0f8      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	080051cc 	.word	0x080051cc
 80015bc:	40007000 	.word	0x40007000
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c0:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	f003 0302 	and.w	r3, r3, #2
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e7      	bne.n	800159c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015cc:	7dfb      	ldrb	r3, [r7, #23]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d105      	bne.n	80015de <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	4a75      	ldr	r2, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 80015d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00c      	beq.n	8001600 <HAL_RCC_OscConfig+0x4bc>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d008      	beq.n	8001600 <HAL_RCC_OscConfig+0x4bc>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d004      	beq.n	8001600 <HAL_RCC_OscConfig+0x4bc>
 80015f6:	f240 214b 	movw	r1, #587	; 0x24b
 80015fa:	486d      	ldr	r0, [pc, #436]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 80015fc:	f002 fff7 	bl	80045ee <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	f000 80cc 	beq.w	80017a2 <HAL_RCC_OscConfig+0x65e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800160a:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b08      	cmp	r3, #8
 8001614:	f000 80c3 	beq.w	800179e <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	2b02      	cmp	r3, #2
 800161e:	f040 80a4 	bne.w	800176a <HAL_RCC_OscConfig+0x626>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_RCC_OscConfig+0x4fa>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001632:	d004      	beq.n	800163e <HAL_RCC_OscConfig+0x4fa>
 8001634:	f44f 7115 	mov.w	r1, #596	; 0x254
 8001638:	485d      	ldr	r0, [pc, #372]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 800163a:	f002 ffd8 	bl	80045ee <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d903      	bls.n	800164e <HAL_RCC_OscConfig+0x50a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2b3f      	cmp	r3, #63	; 0x3f
 800164c:	d904      	bls.n	8001658 <HAL_RCC_OscConfig+0x514>
 800164e:	f240 2155 	movw	r1, #597	; 0x255
 8001652:	4857      	ldr	r0, [pc, #348]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 8001654:	f002 ffcb 	bl	80045ee <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	2b31      	cmp	r3, #49	; 0x31
 800165e:	d904      	bls.n	800166a <HAL_RCC_OscConfig+0x526>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8001668:	d904      	bls.n	8001674 <HAL_RCC_OscConfig+0x530>
 800166a:	f240 2156 	movw	r1, #598	; 0x256
 800166e:	4850      	ldr	r0, [pc, #320]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 8001670:	f002 ffbd 	bl	80045ee <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	2b02      	cmp	r3, #2
 800167a:	d010      	beq.n	800169e <HAL_RCC_OscConfig+0x55a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001680:	2b04      	cmp	r3, #4
 8001682:	d00c      	beq.n	800169e <HAL_RCC_OscConfig+0x55a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	2b06      	cmp	r3, #6
 800168a:	d008      	beq.n	800169e <HAL_RCC_OscConfig+0x55a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001690:	2b08      	cmp	r3, #8
 8001692:	d004      	beq.n	800169e <HAL_RCC_OscConfig+0x55a>
 8001694:	f240 2157 	movw	r1, #599	; 0x257
 8001698:	4845      	ldr	r0, [pc, #276]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 800169a:	f002 ffa8 	bl	80045ee <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d903      	bls.n	80016ae <HAL_RCC_OscConfig+0x56a>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	d904      	bls.n	80016b8 <HAL_RCC_OscConfig+0x574>
 80016ae:	f44f 7116 	mov.w	r1, #600	; 0x258
 80016b2:	483f      	ldr	r0, [pc, #252]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 80016b4:	f002 ff9b 	bl	80045ee <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d903      	bls.n	80016c8 <HAL_RCC_OscConfig+0x584>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	2b07      	cmp	r3, #7
 80016c6:	d904      	bls.n	80016d2 <HAL_RCC_OscConfig+0x58e>
 80016c8:	f240 215a 	movw	r1, #602	; 0x25a
 80016cc:	4838      	ldr	r0, [pc, #224]	; (80017b0 <HAL_RCC_OscConfig+0x66c>)
 80016ce:	f002 ff8e 	bl	80045ee <assert_failed>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a35      	ldr	r2, [pc, #212]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 80016d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016de:	f7fe ffd9 	bl	8000694 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x5b4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e6:	f7fe ffd5 	bl	8000694 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x5b4>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e055      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f8:	4b2c      	ldr	r3, [pc, #176]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f0      	bne.n	80016e6 <HAL_RCC_OscConfig+0x5a2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69da      	ldr	r2, [r3, #28]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	019b      	lsls	r3, r3, #6
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	085b      	lsrs	r3, r3, #1
 800171c:	3b01      	subs	r3, #1
 800171e:	041b      	lsls	r3, r3, #16
 8001720:	431a      	orrs	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001726:	061b      	lsls	r3, r3, #24
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	071b      	lsls	r3, r3, #28
 8001730:	491e      	ldr	r1, [pc, #120]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 8001732:	4313      	orrs	r3, r2
 8001734:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001736:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a1c      	ldr	r2, [pc, #112]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 800173c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001740:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001742:	f7fe ffa7 	bl	8000694 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x618>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800174a:	f7fe ffa3 	bl	8000694 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x618>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e023      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800175c:	4b13      	ldr	r3, [pc, #76]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x606>
 8001768:	e01b      	b.n	80017a2 <HAL_RCC_OscConfig+0x65e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 8001770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7fe ff8d 	bl	8000694 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800177e:	f7fe ff89 	bl	8000694 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e009      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_RCC_OscConfig+0x668>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x63a>
 800179c:	e001      	b.n	80017a2 <HAL_RCC_OscConfig+0x65e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <HAL_RCC_OscConfig+0x660>
    }
  }
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3718      	adds	r7, #24
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	080051cc 	.word	0x080051cc

080017b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d101      	bne.n	80017cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e18a      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_RCC_ClockConfig+0x28>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b0f      	cmp	r3, #15
 80017da:	d904      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x32>
 80017dc:	f240 21ca 	movw	r1, #714	; 0x2ca
 80017e0:	4887      	ldr	r0, [pc, #540]	; (8001a00 <HAL_RCC_ClockConfig+0x24c>)
 80017e2:	f002 ff04 	bl	80045ee <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d031      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d02e      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d02b      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d028      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d025      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d022      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b06      	cmp	r3, #6
 800180e:	d01f      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b07      	cmp	r3, #7
 8001814:	d01c      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2b08      	cmp	r3, #8
 800181a:	d019      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2b09      	cmp	r3, #9
 8001820:	d016      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	2b0a      	cmp	r3, #10
 8001826:	d013      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b0b      	cmp	r3, #11
 800182c:	d010      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d00d      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2b0d      	cmp	r3, #13
 8001838:	d00a      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b0e      	cmp	r3, #14
 800183e:	d007      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2b0f      	cmp	r3, #15
 8001844:	d004      	beq.n	8001850 <HAL_RCC_ClockConfig+0x9c>
 8001846:	f240 21cb 	movw	r1, #715	; 0x2cb
 800184a:	486d      	ldr	r0, [pc, #436]	; (8001a00 <HAL_RCC_ClockConfig+0x24c>)
 800184c:	f002 fecf 	bl	80045ee <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d910      	bls.n	8001880 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b69      	ldr	r3, [pc, #420]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 020f 	bic.w	r2, r3, #15
 8001866:	4967      	ldr	r1, [pc, #412]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e130      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d049      	beq.n	8001920 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a5a      	ldr	r2, [pc, #360]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 800189e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80018a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b55      	ldr	r3, [pc, #340]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a54      	ldr	r2, [pc, #336]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d024      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b80      	cmp	r3, #128	; 0x80
 80018ca:	d020      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b90      	cmp	r3, #144	; 0x90
 80018d2:	d01c      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2ba0      	cmp	r3, #160	; 0xa0
 80018da:	d018      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2bb0      	cmp	r3, #176	; 0xb0
 80018e2:	d014      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2bc0      	cmp	r3, #192	; 0xc0
 80018ea:	d010      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2bd0      	cmp	r3, #208	; 0xd0
 80018f2:	d00c      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2be0      	cmp	r3, #224	; 0xe0
 80018fa:	d008      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2bf0      	cmp	r3, #240	; 0xf0
 8001902:	d004      	beq.n	800190e <HAL_RCC_ClockConfig+0x15a>
 8001904:	f240 21ef 	movw	r1, #751	; 0x2ef
 8001908:	483d      	ldr	r0, [pc, #244]	; (8001a00 <HAL_RCC_ClockConfig+0x24c>)
 800190a:	f002 fe70 	bl	80045ee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	493b      	ldr	r1, [pc, #236]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 800191c:	4313      	orrs	r3, r2
 800191e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b00      	cmp	r3, #0
 800192a:	d051      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00c      	beq.n	800194e <HAL_RCC_ClockConfig+0x19a>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x19a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d004      	beq.n	800194e <HAL_RCC_ClockConfig+0x19a>
 8001944:	f240 21f6 	movw	r1, #758	; 0x2f6
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <HAL_RCC_ClockConfig+0x24c>)
 800194a:	f002 fe50 	bl	80045ee <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d107      	bne.n	8001966 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d115      	bne.n	800198e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e0bd      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e0b1      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0a9      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	491b      	ldr	r1, [pc, #108]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019a0:	f7fe fe78 	bl	8000694 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7fe fe74 	bl	8000694 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e091      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_RCC_ClockConfig+0x254>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d216      	bcs.n	8001a0c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f023 020f 	bic.w	r2, r3, #15
 80019e6:	4907      	ldr	r1, [pc, #28]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ee:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_RCC_ClockConfig+0x250>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 030f 	and.w	r3, r3, #15
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d007      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e070      	b.n	8001ae2 <HAL_RCC_ClockConfig+0x32e>
 8001a00:	080051cc 	.word	0x080051cc
 8001a04:	40023c00 	.word	0x40023c00
 8001a08:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d025      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d018      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x29e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a28:	d013      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x29e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001a32:	d00e      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x29e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x29e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001a46:	d004      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x29e>
 8001a48:	f240 3133 	movw	r1, #819	; 0x333
 8001a4c:	4827      	ldr	r0, [pc, #156]	; (8001aec <HAL_RCC_ClockConfig+0x338>)
 8001a4e:	f002 fdce 	bl	80045ee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a52:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <HAL_RCC_ClockConfig+0x33c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4924      	ldr	r1, [pc, #144]	; (8001af0 <HAL_RCC_ClockConfig+0x33c>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d026      	beq.n	8001abe <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d018      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x2f6>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a80:	d013      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x2f6>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001a8a:	d00e      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x2f6>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x2f6>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001a9e:	d004      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x2f6>
 8001aa0:	f240 313a 	movw	r1, #826	; 0x33a
 8001aa4:	4811      	ldr	r0, [pc, #68]	; (8001aec <HAL_RCC_ClockConfig+0x338>)
 8001aa6:	f002 fda2 	bl	80045ee <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_RCC_ClockConfig+0x33c>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	490d      	ldr	r1, [pc, #52]	; (8001af0 <HAL_RCC_ClockConfig+0x33c>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001abe:	f000 f81d 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8001ac2:	4601      	mov	r1, r0
 8001ac4:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <HAL_RCC_ClockConfig+0x33c>)
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x340>)
 8001ad0:	5cd3      	ldrb	r3, [r2, r3]
 8001ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ad6:	4a08      	ldr	r2, [pc, #32]	; (8001af8 <HAL_RCC_ClockConfig+0x344>)
 8001ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7fe fd96 	bl	800060c <HAL_InitTick>

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3710      	adds	r7, #16
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	080051cc 	.word	0x080051cc
 8001af0:	40023800 	.word	0x40023800
 8001af4:	080052c8 	.word	0x080052c8
 8001af8:	20000008 	.word	0x20000008

08001afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	d007      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x32>
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d008      	beq.n	8001b34 <HAL_RCC_GetSysClockFreq+0x38>
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80b4 	bne.w	8001c90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b28:	4b5e      	ldr	r3, [pc, #376]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b2a:	60bb      	str	r3, [r7, #8]
       break;
 8001b2c:	e0b3      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b30:	60bb      	str	r3, [r7, #8]
      break;
 8001b32:	e0b0      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b34:	4b5a      	ldr	r3, [pc, #360]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b3c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b3e:	4b58      	ldr	r3, [pc, #352]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d04a      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b4a:	4b55      	ldr	r3, [pc, #340]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	f04f 0400 	mov.w	r4, #0
 8001b54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	ea03 0501 	and.w	r5, r3, r1
 8001b60:	ea04 0602 	and.w	r6, r4, r2
 8001b64:	4629      	mov	r1, r5
 8001b66:	4632      	mov	r2, r6
 8001b68:	f04f 0300 	mov.w	r3, #0
 8001b6c:	f04f 0400 	mov.w	r4, #0
 8001b70:	0154      	lsls	r4, r2, #5
 8001b72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b76:	014b      	lsls	r3, r1, #5
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	1b49      	subs	r1, r1, r5
 8001b7e:	eb62 0206 	sbc.w	r2, r2, r6
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	f04f 0400 	mov.w	r4, #0
 8001b8a:	0194      	lsls	r4, r2, #6
 8001b8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b90:	018b      	lsls	r3, r1, #6
 8001b92:	1a5b      	subs	r3, r3, r1
 8001b94:	eb64 0402 	sbc.w	r4, r4, r2
 8001b98:	f04f 0100 	mov.w	r1, #0
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	00e2      	lsls	r2, r4, #3
 8001ba2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ba6:	00d9      	lsls	r1, r3, #3
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	195b      	adds	r3, r3, r5
 8001bae:	eb44 0406 	adc.w	r4, r4, r6
 8001bb2:	f04f 0100 	mov.w	r1, #0
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	0262      	lsls	r2, r4, #9
 8001bbc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001bc0:	0259      	lsls	r1, r3, #9
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4614      	mov	r4, r2
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	4621      	mov	r1, r4
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f04f 0400 	mov.w	r4, #0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4623      	mov	r3, r4
 8001bd4:	f7fe fb8c 	bl	80002f0 <__aeabi_uldivmod>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	460c      	mov	r4, r1
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	e049      	b.n	8001c74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	099b      	lsrs	r3, r3, #6
 8001be6:	f04f 0400 	mov.w	r4, #0
 8001bea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	ea03 0501 	and.w	r5, r3, r1
 8001bf6:	ea04 0602 	and.w	r6, r4, r2
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	4632      	mov	r2, r6
 8001bfe:	f04f 0300 	mov.w	r3, #0
 8001c02:	f04f 0400 	mov.w	r4, #0
 8001c06:	0154      	lsls	r4, r2, #5
 8001c08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c0c:	014b      	lsls	r3, r1, #5
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4622      	mov	r2, r4
 8001c12:	1b49      	subs	r1, r1, r5
 8001c14:	eb62 0206 	sbc.w	r2, r2, r6
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	f04f 0400 	mov.w	r4, #0
 8001c20:	0194      	lsls	r4, r2, #6
 8001c22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c26:	018b      	lsls	r3, r1, #6
 8001c28:	1a5b      	subs	r3, r3, r1
 8001c2a:	eb64 0402 	sbc.w	r4, r4, r2
 8001c2e:	f04f 0100 	mov.w	r1, #0
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	00e2      	lsls	r2, r4, #3
 8001c38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c3c:	00d9      	lsls	r1, r3, #3
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4614      	mov	r4, r2
 8001c42:	195b      	adds	r3, r3, r5
 8001c44:	eb44 0406 	adc.w	r4, r4, r6
 8001c48:	f04f 0100 	mov.w	r1, #0
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	02a2      	lsls	r2, r4, #10
 8001c52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c56:	0299      	lsls	r1, r3, #10
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4621      	mov	r1, r4
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f04f 0400 	mov.w	r4, #0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4623      	mov	r3, r4
 8001c6a:	f7fe fb41 	bl	80002f0 <__aeabi_uldivmod>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460c      	mov	r4, r1
 8001c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	0c1b      	lsrs	r3, r3, #16
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	3301      	adds	r3, #1
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	60bb      	str	r3, [r7, #8]
      break;
 8001c8e:	e002      	b.n	8001c96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c92:	60bb      	str	r3, [r7, #8]
      break;
 8001c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c96:	68bb      	ldr	r3, [r7, #8]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	00f42400 	.word	0x00f42400
 8001ca8:	007a1200 	.word	0x007a1200

08001cac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008

08001cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cc8:	f7ff fff0 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001ccc:	4601      	mov	r1, r0
 8001cce:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	0a9b      	lsrs	r3, r3, #10
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	080052d8 	.word	0x080052d8

08001cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cf0:	f7ff ffdc 	bl	8001cac <HAL_RCC_GetHCLKFreq>
 8001cf4:	4601      	mov	r1, r0
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0b5b      	lsrs	r3, r3, #13
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4a03      	ldr	r2, [pc, #12]	; (8001d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	080052d8 	.word	0x080052d8

08001d14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d20:	2300      	movs	r3, #0
 8001d22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f040 809e 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f040 8097 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f040 8090 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 8089 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f040 8082 	bne.w	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d17b      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d175      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d16f      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d169      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d163      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d15d      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d157      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d151      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d14b      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d145      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d13f      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d139      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d133      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d12d      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d127      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d121      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d11b      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d10f      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d103      	bne.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8001e72:	2174      	movs	r1, #116	; 0x74
 8001e74:	48a2      	ldr	r0, [pc, #648]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001e76:	f002 fbba 	bl	80045ee <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d01f      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e96:	d003      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8001e98:	217a      	movs	r1, #122	; 0x7a
 8001e9a:	4899      	ldr	r0, [pc, #612]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001e9c:	f002 fba7 	bl	80045ee <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ea0:	4b98      	ldr	r3, [pc, #608]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	4a97      	ldr	r2, [pc, #604]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001ea6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eaa:	6093      	str	r3, [r2, #8]
 8001eac:	4b95      	ldr	r3, [pc, #596]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb4:	4993      	ldr	r1, [pc, #588]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      plli2sused = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d02e      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee2:	d00d      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eec:	d008      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001ef6:	d003      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 8001ef8:	218a      	movs	r1, #138	; 0x8a
 8001efa:	4881      	ldr	r0, [pc, #516]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001efc:	f002 fb77 	bl	80045ee <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f00:	4b80      	ldr	r3, [pc, #512]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	497d      	ldr	r1, [pc, #500]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x210>
    {
      plli2sused = 1;
 8001f20:	2301      	movs	r3, #1
 8001f22:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d101      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      pllsaiused = 1;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d02e      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d012      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f4c:	d00d      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f56:	d008      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f60:	d003      	beq.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x256>
 8001f62:	219e      	movs	r1, #158	; 0x9e
 8001f64:	4866      	ldr	r0, [pc, #408]	; (8002100 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8001f66:	f002 fb42 	bl	80045ee <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f6a:	4b66      	ldr	r3, [pc, #408]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001f6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f78:	4962      	ldr	r1, [pc, #392]	; (8002104 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f88:	d101      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      plli2sused = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      pllsaiused = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
      plli2sused = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8187 	beq.w	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x5b2>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc0:	f000 80eb 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fcc:	f000 80e5 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	; (8002108 <HAL_RCCEx_PeriphCLKConfig+0x3f4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	f000 80df 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	4a4a      	ldr	r2, [pc, #296]	; (800210c <HAL_RCCEx_PeriphCLKConfig+0x3f8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	f000 80d9 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fec:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	f000 80d3 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a46      	ldr	r2, [pc, #280]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	f000 80cd 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4a44      	ldr	r2, [pc, #272]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x404>)
 8002006:	4293      	cmp	r3, r2
 8002008:	f000 80c7 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a42      	ldr	r2, [pc, #264]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x408>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f000 80c1 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	4a40      	ldr	r2, [pc, #256]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x40c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	f000 80bb 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002028:	4a3e      	ldr	r2, [pc, #248]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x410>)
 800202a:	4293      	cmp	r3, r2
 800202c:	f000 80b5 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002034:	4a3c      	ldr	r2, [pc, #240]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x414>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f000 80af 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002040:	4a3a      	ldr	r2, [pc, #232]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x418>)
 8002042:	4293      	cmp	r3, r2
 8002044:	f000 80a9 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204c:	4a38      	ldr	r2, [pc, #224]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	f000 80a3 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002058:	4a36      	ldr	r2, [pc, #216]	; (8002134 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800205a:	4293      	cmp	r3, r2
 800205c:	f000 809d 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002064:	4a34      	ldr	r2, [pc, #208]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 8002066:	4293      	cmp	r3, r2
 8002068:	f000 8097 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002070:	4a32      	ldr	r2, [pc, #200]	; (800213c <HAL_RCCEx_PeriphCLKConfig+0x428>)
 8002072:	4293      	cmp	r3, r2
 8002074:	f000 8091 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a30      	ldr	r2, [pc, #192]	; (8002140 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	f000 808b 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	4a2e      	ldr	r2, [pc, #184]	; (8002144 <HAL_RCCEx_PeriphCLKConfig+0x430>)
 800208a:	4293      	cmp	r3, r2
 800208c:	f000 8085 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a2c      	ldr	r2, [pc, #176]	; (8002148 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d07f      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	4a2b      	ldr	r2, [pc, #172]	; (800214c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d07a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4a29      	ldr	r2, [pc, #164]	; (8002150 <HAL_RCCEx_PeriphCLKConfig+0x43c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d075      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a28      	ldr	r2, [pc, #160]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x440>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d070      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	4a26      	ldr	r2, [pc, #152]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d06b      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a25      	ldr	r2, [pc, #148]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d066      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d061      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a22      	ldr	r2, [pc, #136]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d05c      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e4:	4a20      	ldr	r2, [pc, #128]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d057      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a1f      	ldr	r2, [pc, #124]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d052      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d04d      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80020fe:	e039      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002100:	08005204 	.word	0x08005204
 8002104:	40023800 	.word	0x40023800
 8002108:	00020300 	.word	0x00020300
 800210c:	00030300 	.word	0x00030300
 8002110:	00040300 	.word	0x00040300
 8002114:	00050300 	.word	0x00050300
 8002118:	00060300 	.word	0x00060300
 800211c:	00070300 	.word	0x00070300
 8002120:	00080300 	.word	0x00080300
 8002124:	00090300 	.word	0x00090300
 8002128:	000a0300 	.word	0x000a0300
 800212c:	000b0300 	.word	0x000b0300
 8002130:	000c0300 	.word	0x000c0300
 8002134:	000d0300 	.word	0x000d0300
 8002138:	000e0300 	.word	0x000e0300
 800213c:	000f0300 	.word	0x000f0300
 8002140:	00100300 	.word	0x00100300
 8002144:	00110300 	.word	0x00110300
 8002148:	00120300 	.word	0x00120300
 800214c:	00130300 	.word	0x00130300
 8002150:	00140300 	.word	0x00140300
 8002154:	00150300 	.word	0x00150300
 8002158:	00160300 	.word	0x00160300
 800215c:	00170300 	.word	0x00170300
 8002160:	00180300 	.word	0x00180300
 8002164:	00190300 	.word	0x00190300
 8002168:	001a0300 	.word	0x001a0300
 800216c:	001b0300 	.word	0x001b0300
 8002170:	001c0300 	.word	0x001c0300
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a44      	ldr	r2, [pc, #272]	; (800228c <HAL_RCCEx_PeriphCLKConfig+0x578>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00d      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a43      	ldr	r2, [pc, #268]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x57c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d008      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4a41      	ldr	r2, [pc, #260]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x580>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d003      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002192:	21b9      	movs	r1, #185	; 0xb9
 8002194:	4840      	ldr	r0, [pc, #256]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x584>)
 8002196:	f002 fa2a 	bl	80045ee <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b40      	ldr	r3, [pc, #256]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	4a3f      	ldr	r2, [pc, #252]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6413      	str	r3, [r2, #64]	; 0x40
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021b2:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a3a      	ldr	r2, [pc, #232]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80021b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021be:	f7fe fa69 	bl	8000694 <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021c4:	e009      	b.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c6:	f7fe fa65 	bl	8000694 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b64      	cmp	r3, #100	; 0x64
 80021d2:	d902      	bls.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x4c6>
      {
        return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	f000 be00 	b.w	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0ef      	beq.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021e6:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d036      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	429a      	cmp	r2, r3
 8002202:	d02f      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x550>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002204:	4b25      	ldr	r3, [pc, #148]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002212:	4a22      	ldr	r2, [pc, #136]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002218:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	4a1f      	ldr	r2, [pc, #124]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002224:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002226:	4a1d      	ldr	r2, [pc, #116]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800222e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d115      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x550>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7fe fa2c 	bl	8000694 <HAL_GetTick>
 800223c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800223e:	e00b      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x544>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002240:	f7fe fa28 	bl	8000694 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	; 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d902      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x544>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	f000 bdc1 	b.w	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10c6>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ed      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x52c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002270:	d11a      	bne.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800227e:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCCEx_PeriphCLKConfig+0x590>)
 8002280:	400b      	ands	r3, r1
 8002282:	4906      	ldr	r1, [pc, #24]	; (800229c <HAL_RCCEx_PeriphCLKConfig+0x588>)
 8002284:	4313      	orrs	r3, r2
 8002286:	608b      	str	r3, [r1, #8]
 8002288:	e014      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800228a:	bf00      	nop
 800228c:	001d0300 	.word	0x001d0300
 8002290:	001e0300 	.word	0x001e0300
 8002294:	001f0300 	.word	0x001f0300
 8002298:	08005204 	.word	0x08005204
 800229c:	40023800 	.word	0x40023800
 80022a0:	40007000 	.word	0x40007000
 80022a4:	0ffffcff 	.word	0x0ffffcff
 80022a8:	4ba7      	ldr	r3, [pc, #668]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4aa6      	ldr	r2, [pc, #664]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80022b2:	6093      	str	r3, [r2, #8]
 80022b4:	4ba4      	ldr	r3, [pc, #656]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c0:	49a1      	ldr	r1, [pc, #644]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01d      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e2:	d003      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x5d8>
 80022e4:	21f3      	movs	r1, #243	; 0xf3
 80022e6:	4899      	ldr	r0, [pc, #612]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80022e8:	f002 f981 	bl	80045ee <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80022ec:	4b96      	ldr	r3, [pc, #600]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f2:	4a95      	ldr	r2, [pc, #596]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022fc:	4b92      	ldr	r3, [pc, #584]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80022fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002306:	4990      	ldr	r1, [pc, #576]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d01c      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800231e:	2b00      	cmp	r3, #0
 8002320:	d00d      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232a:	d008      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002334:	d003      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x62a>
 8002336:	21fd      	movs	r1, #253	; 0xfd
 8002338:	4884      	ldr	r0, [pc, #528]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800233a:	f002 f958 	bl	80045ee <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800233e:	4b82      	ldr	r3, [pc, #520]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800234c:	497e      	ldr	r1, [pc, #504]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d01d      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x688>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800236c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002370:	d009      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800237a:	d004      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800237c:	f240 1107 	movw	r1, #263	; 0x107
 8002380:	4872      	ldr	r0, [pc, #456]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002382:	f002 f934 	bl	80045ee <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002386:	4b70      	ldr	r3, [pc, #448]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002394:	496c      	ldr	r1, [pc, #432]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002396:	4313      	orrs	r3, r2
 8002398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01d      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023b8:	d009      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80023c2:	d004      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x6ba>
 80023c4:	f240 1111 	movw	r1, #273	; 0x111
 80023c8:	4860      	ldr	r0, [pc, #384]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80023ca:	f002 f910 	bl	80045ee <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023ce:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023dc:	495a      	ldr	r1, [pc, #360]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01d      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x718>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x702>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002400:	d009      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x702>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002406:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800240a:	d004      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x702>
 800240c:	f240 111b 	movw	r1, #283	; 0x11b
 8002410:	484e      	ldr	r0, [pc, #312]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002412:	f002 f8ec 	bl	80045ee <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002416:	4b4c      	ldr	r3, [pc, #304]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	4948      	ldr	r1, [pc, #288]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01f      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x764>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800243c:	2b00      	cmp	r3, #0
 800243e:	d010      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002444:	2b01      	cmp	r3, #1
 8002446:	d00c      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	2b03      	cmp	r3, #3
 800244e:	d008      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002454:	2b02      	cmp	r3, #2
 8002456:	d004      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x74e>
 8002458:	f240 1125 	movw	r1, #293	; 0x125
 800245c:	483b      	ldr	r0, [pc, #236]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800245e:	f002 f8c6 	bl	80045ee <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002462:	4b39      	ldr	r3, [pc, #228]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f023 0203 	bic.w	r2, r3, #3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	4935      	ldr	r1, [pc, #212]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01f      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d010      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002490:	2b04      	cmp	r3, #4
 8002492:	d00c      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x79a>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d008      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x79a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a0:	2b08      	cmp	r3, #8
 80024a2:	d004      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x79a>
 80024a4:	f240 112f 	movw	r1, #303	; 0x12f
 80024a8:	4828      	ldr	r0, [pc, #160]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80024aa:	f002 f8a0 	bl	80045ee <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	f023 020c 	bic.w	r2, r3, #12
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024bc:	4922      	ldr	r1, [pc, #136]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01f      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d00c      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d008      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d004      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80024f0:	f240 1139 	movw	r1, #313	; 0x139
 80024f4:	4815      	ldr	r0, [pc, #84]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80024f6:	f002 f87a 	bl	80045ee <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80024fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002500:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002508:	490f      	ldr	r1, [pc, #60]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002518:	2b00      	cmp	r3, #0
 800251a:	d024      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	2b00      	cmp	r3, #0
 8002522:	d015      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d011      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002530:	2bc0      	cmp	r3, #192	; 0xc0
 8002532:	d00d      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	2b80      	cmp	r3, #128	; 0x80
 800253a:	d009      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800253c:	f240 1143 	movw	r1, #323	; 0x143
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002542:	f002 f854 	bl	80045ee <assert_failed>
 8002546:	e003      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002548:	40023800 	.word	0x40023800
 800254c:	08005204 	.word	0x08005204

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002550:	4bae      	ldr	r3, [pc, #696]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	49ab      	ldr	r1, [pc, #684]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256e:	2b00      	cmp	r3, #0
 8002570:	d022      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	2b00      	cmp	r3, #0
 8002578:	d013      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d00e      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800258c:	d009      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002596:	d004      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x88e>
 8002598:	f240 114d 	movw	r1, #333	; 0x14d
 800259c:	489c      	ldr	r0, [pc, #624]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 800259e:	f002 f826 	bl	80045ee <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025a2:	4b9a      	ldr	r3, [pc, #616]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	4996      	ldr	r1, [pc, #600]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d022      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d013      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d4:	d00e      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025de:	d009      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025e8:	d004      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x8e0>
 80025ea:	f240 1157 	movw	r1, #343	; 0x157
 80025ee:	4888      	ldr	r0, [pc, #544]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80025f0:	f001 fffd 	bl	80045ee <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025f4:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80025f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	4982      	ldr	r1, [pc, #520]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d022      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	d00e      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002630:	d009      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x932>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800263a:	d004      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800263c:	f240 1161 	movw	r1, #353	; 0x161
 8002640:	4873      	ldr	r0, [pc, #460]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8002642:	f001 ffd4 	bl	80045ee <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002646:	4b71      	ldr	r3, [pc, #452]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002654:	496d      	ldr	r1, [pc, #436]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d022      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	2b00      	cmp	r3, #0
 800266e:	d013      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002678:	d00e      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800267e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002682:	d009      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800268c:	d004      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800268e:	f240 116b 	movw	r1, #363	; 0x16b
 8002692:	485f      	ldr	r0, [pc, #380]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8002694:	f001 ffab 	bl	80045ee <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002698:	4b5c      	ldr	r3, [pc, #368]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a6:	4959      	ldr	r1, [pc, #356]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d018      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x9d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026c2:	d008      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d004      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 80026cc:	f240 1175 	movw	r1, #373	; 0x175
 80026d0:	484f      	ldr	r0, [pc, #316]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80026d2:	f001 ff8c 	bl	80045ee <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80026d6:	4b4d      	ldr	r3, [pc, #308]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026e4:	4949      	ldr	r1, [pc, #292]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01f      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002700:	d008      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d004      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800270a:	f240 117f 	movw	r1, #383	; 0x17f
 800270e:	4840      	ldr	r0, [pc, #256]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8002710:	f001 ff6d 	bl	80045ee <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002722:	493a      	ldr	r1, [pc, #232]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002732:	d101      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xa24>
    {
      pllsaiused = 1;
 8002734:	2301      	movs	r3, #1
 8002736:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    pllsaiused = 1;
 8002744:	2301      	movs	r3, #1
 8002746:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d022      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xa86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002758:	2b00      	cmp	r3, #0
 800275a:	d013      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d00e      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800276e:	d009      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002774:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002778:	d004      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800277a:	f240 1197 	movw	r1, #407	; 0x197
 800277e:	4824      	ldr	r0, [pc, #144]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8002780:	f001 ff35 	bl	80045ee <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002784:	4b21      	ldr	r3, [pc, #132]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002792:	491e      	ldr	r1, [pc, #120]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d01b      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xaca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027b0:	d009      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d004      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80027bc:	f240 11a1 	movw	r1, #417	; 0x1a1
 80027c0:	4813      	ldr	r0, [pc, #76]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 80027c2:	f001 ff14 	bl	80045ee <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0xaf8>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d020      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f4:	d00e      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d009      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 8002800:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0xafc>)
 8002806:	f001 fef2 	bl	80045ee <assert_failed>
 800280a:	e003      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800280c:	40023800 	.word	0x40023800
 8002810:	08005204 	.word	0x08005204

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002814:	4b35      	ldr	r3, [pc, #212]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002824:	4931      	ldr	r1, [pc, #196]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 8002826:	4313      	orrs	r3, r2
 8002828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00a      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800284c:	d004      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0xb44>
 800284e:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8002852:	4827      	ldr	r0, [pc, #156]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002854:	f001 fecb 	bl	80045ee <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800285a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800285e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	4920      	ldr	r1, [pc, #128]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800286a:	4313      	orrs	r3, r2
 800286c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01b      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00a      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800288c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002890:	d004      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8002892:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8002896:	4816      	ldr	r0, [pc, #88]	; (80028f0 <HAL_RCCEx_PeriphCLKConfig+0xbdc>)
 8002898:	f001 fea9 	bl	80045ee <assert_failed>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800289c:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 800289e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	490f      	ldr	r1, [pc, #60]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d005      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80028c2:	f040 8153 	bne.w	8002b6c <HAL_RCCEx_PeriphCLKConfig+0xe58>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80028c6:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a08      	ldr	r2, [pc, #32]	; (80028ec <HAL_RCCEx_PeriphCLKConfig+0xbd8>)
 80028cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d2:	f7fd fedf 	bl	8000694 <HAL_GetTick>
 80028d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028d8:	e00c      	b.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028da:	f7fd fedb 	bl	8000694 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b64      	cmp	r3, #100	; 0x64
 80028e6:	d905      	bls.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e276      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 80028ec:	40023800 	.word	0x40023800
 80028f0:	08005204 	.word	0x08005204
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028f4:	4ba9      	ldr	r3, [pc, #676]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ec      	bne.n	80028da <HAL_RCCEx_PeriphCLKConfig+0xbc6>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b31      	cmp	r3, #49	; 0x31
 8002906:	d904      	bls.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002910:	d904      	bls.n	800291c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8002912:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002916:	48a2      	ldr	r0, [pc, #648]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8002918:	f001 fe69 	bl	80045ee <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d02e      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	2b00      	cmp	r3, #0
 800292e:	d12a      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d903      	bls.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2b07      	cmp	r3, #7
 800293e:	d904      	bls.n	800294a <HAL_RCCEx_PeriphCLKConfig+0xc36>
 8002940:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8002944:	4896      	ldr	r0, [pc, #600]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8002946:	f001 fe52 	bl	80045ee <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800294a:	4b94      	ldr	r3, [pc, #592]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002958:	4b90      	ldr	r3, [pc, #576]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800295a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295e:	0e1b      	lsrs	r3, r3, #24
 8002960:	f003 030f 	and.w	r3, r3, #15
 8002964:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	019a      	lsls	r2, r3, #6
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	041b      	lsls	r3, r3, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	071b      	lsls	r3, r3, #28
 800297e:	4987      	ldr	r1, [pc, #540]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002980:	4313      	orrs	r3, r2
 8002982:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d004      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0xc88>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d048      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0xd26>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b0:	d143      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d903      	bls.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0xcae>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	d904      	bls.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xcb8>
 80029c2:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80029c6:	4876      	ldr	r0, [pc, #472]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80029c8:	f001 fe11 	bl	80045ee <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d904      	bls.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80029dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80029e0:	486f      	ldr	r0, [pc, #444]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 80029e2:	f001 fe04 	bl	80045ee <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80029e6:	4b6d      	ldr	r3, [pc, #436]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80029e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ec:	0c1b      	lsrs	r3, r3, #16
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029f4:	4b69      	ldr	r3, [pc, #420]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80029f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029fa:	0f1b      	lsrs	r3, r3, #28
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	019a      	lsls	r2, r3, #6
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	041b      	lsls	r3, r3, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	061b      	lsls	r3, r3, #24
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	071b      	lsls	r3, r3, #28
 8002a1a:	4960      	ldr	r1, [pc, #384]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002a22:	4b5e      	ldr	r3, [pc, #376]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a28:	f023 021f 	bic.w	r2, r3, #31
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	3b01      	subs	r3, #1
 8002a32:	495a      	ldr	r1, [pc, #360]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d032      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xd98>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d00c      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d008      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d004      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0xd5c>
 8002a66:	f240 2107 	movw	r1, #519	; 0x207
 8002a6a:	484d      	ldr	r0, [pc, #308]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8002a6c:	f001 fdbf 	bl	80045ee <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a70:	4b4a      	ldr	r3, [pc, #296]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a76:	0e1b      	lsrs	r3, r3, #24
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002a7e:	4b47      	ldr	r3, [pc, #284]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a84:	0f1b      	lsrs	r3, r3, #28
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	019a      	lsls	r2, r3, #6
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	071b      	lsls	r3, r3, #28
 8002aa4:	493d      	ldr	r1, [pc, #244]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d040      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xe26>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d004      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
 8002ad8:	f240 2116 	movw	r1, #534	; 0x216
 8002adc:	4830      	ldr	r0, [pc, #192]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8002ade:	f001 fd86 	bl	80045ee <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d903      	bls.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b07      	cmp	r3, #7
 8002af0:	d904      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xde8>
 8002af2:	f240 2117 	movw	r1, #535	; 0x217
 8002af6:	482a      	ldr	r0, [pc, #168]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8002af8:	f001 fd79 	bl	80045ee <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d903      	bls.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xdf8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d904      	bls.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xe02>
 8002b0c:	f44f 7106 	mov.w	r1, #536	; 0x218
 8002b10:	4823      	ldr	r0, [pc, #140]	; (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0xe8c>)
 8002b12:	f001 fd6c 	bl	80045ee <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	019a      	lsls	r2, r3, #6
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	071b      	lsls	r3, r3, #28
 8002b32:	491a      	ldr	r1, [pc, #104]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a17      	ldr	r2, [pc, #92]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b46:	f7fd fda5 	bl	8000694 <HAL_GetTick>
 8002b4a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b4e:	f7fd fda1 	bl	8000694 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e13c      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b60:	4b0e      	ldr	r3, [pc, #56]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	f040 8132 	bne.w	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002b74:	4b09      	ldr	r3, [pc, #36]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a08      	ldr	r2, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8002b7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b80:	f7fd fd88 	bl	8000694 <HAL_GetTick>
 8002b84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002b86:	e00d      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xe90>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002b88:	f7fd fd84 	bl	8000694 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b64      	cmp	r3, #100	; 0x64
 8002b94:	d906      	bls.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0xe90>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e11f      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10c6>
 8002b9a:	bf00      	nop
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	08005204 	.word	0x08005204
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002ba4:	4b8f      	ldr	r3, [pc, #572]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb0:	d0ea      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0xe74>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b31      	cmp	r3, #49	; 0x31
 8002bb8:	d904      	bls.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0xeb0>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002bc2:	d904      	bls.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xeba>
 8002bc4:	f240 2146 	movw	r1, #582	; 0x246
 8002bc8:	4887      	ldr	r0, [pc, #540]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8002bca:	f001 fd10 	bl	80045ee <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0xece>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d009      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xee2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d048      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d144      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d903      	bls.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xef2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	2b0f      	cmp	r3, #15
 8002c04:	d904      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xefc>
 8002c06:	f240 214d 	movw	r1, #589	; 0x24d
 8002c0a:	4877      	ldr	r0, [pc, #476]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8002c0c:	f001 fcef 	bl	80045ee <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d904      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8002c20:	f240 214f 	movw	r1, #591	; 0x24f
 8002c24:	4870      	ldr	r0, [pc, #448]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8002c26:	f001 fce2 	bl	80045ee <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c2a:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c38:	4b6a      	ldr	r3, [pc, #424]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	0f1b      	lsrs	r3, r3, #28
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	019a      	lsls	r2, r3, #6
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	041b      	lsls	r3, r3, #16
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	061b      	lsls	r3, r3, #24
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	071b      	lsls	r3, r3, #28
 8002c5e:	4961      	ldr	r1, [pc, #388]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c66:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c74:	3b01      	subs	r3, #1
 8002c76:	021b      	lsls	r3, r3, #8
 8002c78:	495a      	ldr	r1, [pc, #360]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d037      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c94:	d132      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d00c      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d008      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d004      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0xfac>
 8002cb6:	f240 2162 	movw	r1, #610	; 0x262
 8002cba:	484b      	ldr	r0, [pc, #300]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8002cbc:	f001 fc97 	bl	80045ee <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cc0:	4b48      	ldr	r3, [pc, #288]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	0e1b      	lsrs	r3, r3, #24
 8002cc8:	f003 030f 	and.w	r3, r3, #15
 8002ccc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002cce:	4b45      	ldr	r3, [pc, #276]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd4:	0f1b      	lsrs	r3, r3, #28
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	019a      	lsls	r2, r3, #6
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	061b      	lsls	r3, r3, #24
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	071b      	lsls	r3, r3, #28
 8002cf4:	493b      	ldr	r1, [pc, #236]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0308 	and.w	r3, r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d04d      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x1090>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69db      	ldr	r3, [r3, #28]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d903      	bls.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x1004>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d904      	bls.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x100e>
 8002d18:	f240 2171 	movw	r1, #625	; 0x271
 8002d1c:	4832      	ldr	r0, [pc, #200]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8002d1e:	f001 fc66 	bl	80045ee <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d013      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d32:	d00e      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d46:	d004      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x103e>
 8002d48:	f240 2172 	movw	r1, #626	; 0x272
 8002d4c:	4826      	ldr	r0, [pc, #152]	; (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>)
 8002d4e:	f001 fc4e 	bl	80045ee <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002d52:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	0e1b      	lsrs	r3, r3, #24
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d60:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d66:	0c1b      	lsrs	r3, r3, #16
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	019a      	lsls	r2, r3, #6
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	041b      	lsls	r3, r3, #16
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	4917      	ldr	r1, [pc, #92]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	4911      	ldr	r1, [pc, #68]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0e      	ldr	r2, [pc, #56]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fd fc70 	bl	8000694 <HAL_GetTick>
 8002db4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002db8:	f7fd fc6c 	bl	8000694 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b64      	cmp	r3, #100	; 0x64
 8002dc4:	d901      	bls.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x10b6>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e007      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x10c6>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd6:	d1ef      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	08005204 	.word	0x08005204

08002dec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e09f      	b.n	8002f3e <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d02d      	beq.n	8002e62 <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4f      	ldr	r2, [pc, #316]	; (8002f48 <HAL_UART_Init+0x15c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d055      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4d      	ldr	r2, [pc, #308]	; (8002f4c <HAL_UART_Init+0x160>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d050      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <HAL_UART_Init+0x164>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d04b      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4a      	ldr	r2, [pc, #296]	; (8002f54 <HAL_UART_Init+0x168>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d046      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a49      	ldr	r2, [pc, #292]	; (8002f58 <HAL_UART_Init+0x16c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d041      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a47      	ldr	r2, [pc, #284]	; (8002f5c <HAL_UART_Init+0x170>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d03c      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_UART_Init+0x174>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d037      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a44      	ldr	r2, [pc, #272]	; (8002f64 <HAL_UART_Init+0x178>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d032      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e56:	f44f 7195 	mov.w	r1, #298	; 0x12a
 8002e5a:	4843      	ldr	r0, [pc, #268]	; (8002f68 <HAL_UART_Init+0x17c>)
 8002e5c:	f001 fbc7 	bl	80045ee <assert_failed>
 8002e60:	e02c      	b.n	8002ebc <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a38      	ldr	r2, [pc, #224]	; (8002f48 <HAL_UART_Init+0x15c>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d027      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a36      	ldr	r2, [pc, #216]	; (8002f4c <HAL_UART_Init+0x160>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a35      	ldr	r2, [pc, #212]	; (8002f50 <HAL_UART_Init+0x164>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a33      	ldr	r2, [pc, #204]	; (8002f54 <HAL_UART_Init+0x168>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a32      	ldr	r2, [pc, #200]	; (8002f58 <HAL_UART_Init+0x16c>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a30      	ldr	r2, [pc, #192]	; (8002f5c <HAL_UART_Init+0x170>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	; (8002f60 <HAL_UART_Init+0x174>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a2d      	ldr	r2, [pc, #180]	; (8002f64 <HAL_UART_Init+0x178>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_UART_Init+0xd0>
 8002eb2:	f240 112f 	movw	r1, #303	; 0x12f
 8002eb6:	482c      	ldr	r0, [pc, #176]	; (8002f68 <HAL_UART_Init+0x17c>)
 8002eb8:	f001 fb99 	bl	80045ee <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d106      	bne.n	8002ed2 <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f001 fbbd 	bl	800464c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2224      	movs	r2, #36	; 0x24
 8002ed6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 faff 	bl	80034ec <UART_SetConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e022      	b.n	8002f3e <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fe29 	bl	8003b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f14:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f24:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 ff62 	bl	8003e00 <UART_CheckIdleState>
 8002f3c:	4603      	mov	r3, r0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40011000 	.word	0x40011000
 8002f4c:	40004400 	.word	0x40004400
 8002f50:	40004800 	.word	0x40004800
 8002f54:	40004c00 	.word	0x40004c00
 8002f58:	40005000 	.word	0x40005000
 8002f5c:	40011400 	.word	0x40011400
 8002f60:	40007800 	.word	0x40007800
 8002f64:	40007c00 	.word	0x40007c00
 8002f68:	08005240 	.word	0x08005240

08002f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b08a      	sub	sp, #40	; 0x28
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d17f      	bne.n	8003084 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_Transmit+0x24>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e078      	b.n	8003086 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit+0x36>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e071      	b.n	8003086 <HAL_UART_Transmit+0x11a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2221      	movs	r2, #33	; 0x21
 8002fb4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002fb6:	f7fd fb6d 	bl	8000694 <HAL_GetTick>
 8002fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	88fa      	ldrh	r2, [r7, #6]
 8002fc0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	88fa      	ldrh	r2, [r7, #6]
 8002fc8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fd4:	d108      	bne.n	8002fe8 <HAL_UART_Transmit+0x7c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d104      	bne.n	8002fe8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e003      	b.n	8002ff0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ff0:	e02c      	b.n	800304c <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2180      	movs	r1, #128	; 0x80
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 ff2e 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e03c      	b.n	8003086 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10b      	bne.n	800302a <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	881b      	ldrh	r3, [r3, #0]
 8003016:	461a      	mov	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003020:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	3302      	adds	r3, #2
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	e007      	b.n	800303a <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	781a      	ldrb	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	3301      	adds	r3, #1
 8003038:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1cc      	bne.n	8002ff2 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	2140      	movs	r1, #64	; 0x40
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fefb 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d001      	beq.n	8003072 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e009      	b.n	8003086 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003080:	2300      	movs	r3, #0
 8003082:	e000      	b.n	8003086 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003084:	2302      	movs	r3, #2
  }
}
 8003086:	4618      	mov	r0, r3
 8003088:	3720      	adds	r7, #32
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
	...

08003090 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	4613      	mov	r3, r2
 800309c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a2:	2b20      	cmp	r3, #32
 80030a4:	d144      	bne.n	8003130 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <HAL_UART_Transmit_IT+0x22>
 80030ac:	88fb      	ldrh	r3, [r7, #6]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e03d      	b.n	8003132 <HAL_UART_Transmit_IT+0xa2>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_UART_Transmit_IT+0x34>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e036      	b.n	8003132 <HAL_UART_Transmit_IT+0xa2>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	88fa      	ldrh	r2, [r7, #6]
 80030d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2221      	movs	r2, #33	; 0x21
 80030f2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030fc:	d107      	bne.n	800310e <HAL_UART_Transmit_IT+0x7e>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <HAL_UART_Transmit_IT+0xb0>)
 800310a:	665a      	str	r2, [r3, #100]	; 0x64
 800310c:	e002      	b.n	8003114 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a0c      	ldr	r2, [pc, #48]	; (8003144 <HAL_UART_Transmit_IT+0xb4>)
 8003112:	665a      	str	r2, [r3, #100]	; 0x64
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800312a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e000      	b.n	8003132 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8003130:	2302      	movs	r3, #2
  }
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	08003fcd 	.word	0x08003fcd
 8003144:	08003f5b 	.word	0x08003f5b

08003148 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer.
  * @param Size  Amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	4613      	mov	r3, r2
 8003154:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800315a:	2b20      	cmp	r3, #32
 800315c:	f040 808a 	bne.w	8003274 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Receive_IT+0x24>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e082      	b.n	8003276 <HAL_UART_Receive_IT+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_UART_Receive_IT+0x36>
 800317a:	2302      	movs	r3, #2
 800317c:	e07b      	b.n	8003276 <HAL_UART_Receive_IT+0x12e>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	88fa      	ldrh	r2, [r7, #6]
 8003198:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031aa:	d10e      	bne.n	80031ca <HAL_UART_Receive_IT+0x82>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_UART_Receive_IT+0x78>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80031ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031be:	e02d      	b.n	800321c <HAL_UART_Receive_IT+0xd4>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	22ff      	movs	r2, #255	; 0xff
 80031c4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031c8:	e028      	b.n	800321c <HAL_UART_Receive_IT+0xd4>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10d      	bne.n	80031ee <HAL_UART_Receive_IT+0xa6>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d104      	bne.n	80031e4 <HAL_UART_Receive_IT+0x9c>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031e2:	e01b      	b.n	800321c <HAL_UART_Receive_IT+0xd4>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	227f      	movs	r2, #127	; 0x7f
 80031e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80031ec:	e016      	b.n	800321c <HAL_UART_Receive_IT+0xd4>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031f6:	d10d      	bne.n	8003214 <HAL_UART_Receive_IT+0xcc>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d104      	bne.n	800320a <HAL_UART_Receive_IT+0xc2>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	227f      	movs	r2, #127	; 0x7f
 8003204:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003208:	e008      	b.n	800321c <HAL_UART_Receive_IT+0xd4>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	223f      	movs	r2, #63	; 0x3f
 800320e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003212:	e003      	b.n	800321c <HAL_UART_Receive_IT+0xd4>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2222      	movs	r2, #34	; 0x22
 8003226:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0201 	orr.w	r2, r2, #1
 8003236:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d107      	bne.n	8003252 <HAL_UART_Receive_IT+0x10a>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a0d      	ldr	r2, [pc, #52]	; (8003284 <HAL_UART_Receive_IT+0x13c>)
 800324e:	661a      	str	r2, [r3, #96]	; 0x60
 8003250:	e002      	b.n	8003258 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <HAL_UART_Receive_IT+0x140>)
 8003256:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800326e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003270:	2300      	movs	r3, #0
 8003272:	e000      	b.n	8003276 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8003274:	2302      	movs	r3, #2
  }
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	08004121 	.word	0x08004121
 8003288:	0800407b 	.word	0x0800407b

0800328c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b088      	sub	sp, #32
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d113      	bne.n	80032e2 <HAL_UART_IRQHandler+0x56>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	f003 0320 	and.w	r3, r3, #32
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00e      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_UART_IRQHandler+0x56>
    {
      if (huart->RxISR != NULL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80eb 	beq.w	80034ae <HAL_UART_IRQHandler+0x222>
      {
        huart->RxISR(huart);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
      }
      return;
 80032e0:	e0e5      	b.n	80034ae <HAL_UART_IRQHandler+0x222>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80c0 	beq.w	800346a <HAL_UART_IRQHandler+0x1de>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_UART_IRQHandler+0x74>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80b5 	beq.w	800346a <HAL_UART_IRQHandler+0x1de>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00e      	beq.n	8003328 <HAL_UART_IRQHandler+0x9c>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d009      	beq.n	8003328 <HAL_UART_IRQHandler+0x9c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2201      	movs	r2, #1
 800331a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00e      	beq.n	8003350 <HAL_UART_IRQHandler+0xc4>
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0301 	and.w	r3, r3, #1
 8003338:	2b00      	cmp	r3, #0
 800333a:	d009      	beq.n	8003350 <HAL_UART_IRQHandler+0xc4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2202      	movs	r2, #2
 8003342:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00e      	beq.n	8003378 <HAL_UART_IRQHandler+0xec>
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d009      	beq.n	8003378 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2204      	movs	r2, #4
 800336a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003370:	f043 0202 	orr.w	r2, r3, #2
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d013      	beq.n	80033aa <HAL_UART_IRQHandler+0x11e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0x11e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2208      	movs	r2, #8
 800339c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033a2:	f043 0208 	orr.w	r2, r3, #8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d07f      	beq.n	80034b2 <HAL_UART_IRQHandler+0x226>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0320 	and.w	r3, r3, #32
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00c      	beq.n	80033d6 <HAL_UART_IRQHandler+0x14a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_UART_IRQHandler+0x14a>
      {
        if (huart->RxISR != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_UART_IRQHandler+0x14a>
        {
          huart->RxISR(huart);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033da:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d004      	beq.n	80033f4 <HAL_UART_IRQHandler+0x168>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d031      	beq.n	8003458 <HAL_UART_IRQHandler+0x1cc>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 fd7a 	bl	8003eee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003404:	2b40      	cmp	r3, #64	; 0x40
 8003406:	d123      	bne.n	8003450 <HAL_UART_IRQHandler+0x1c4>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003416:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341c:	2b00      	cmp	r3, #0
 800341e:	d013      	beq.n	8003448 <HAL_UART_IRQHandler+0x1bc>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003424:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_UART_IRQHandler+0x234>)
 8003426:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd fa7d 	bl	800092c <HAL_DMA_Abort_IT>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d016      	beq.n	8003466 <HAL_UART_IRQHandler+0x1da>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003442:	4610      	mov	r0, r2
 8003444:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003446:	e00e      	b.n	8003466 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f845 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800344e:	e00a      	b.n	8003466 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f841 	bl	80034d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003456:	e006      	b.n	8003466 <HAL_UART_IRQHandler+0x1da>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f83d 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8003464:	e025      	b.n	80034b2 <HAL_UART_IRQHandler+0x226>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003466:	bf00      	nop
    return;
 8003468:	e023      	b.n	80034b2 <HAL_UART_IRQHandler+0x226>

  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00d      	beq.n	8003490 <HAL_UART_IRQHandler+0x204>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800347a:	2b00      	cmp	r3, #0
 800347c:	d008      	beq.n	8003490 <HAL_UART_IRQHandler+0x204>
  {
    if (huart->TxISR != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003482:	2b00      	cmp	r3, #0
 8003484:	d017      	beq.n	80034b6 <HAL_UART_IRQHandler+0x22a>
    {
      huart->TxISR(huart);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
    }
    return;
 800348e:	e012      	b.n	80034b6 <HAL_UART_IRQHandler+0x22a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00e      	beq.n	80034b8 <HAL_UART_IRQHandler+0x22c>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <HAL_UART_IRQHandler+0x22c>
  {
    UART_EndTransmit_IT(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 fdcf 	bl	8004048 <UART_EndTransmit_IT>
    return;
 80034aa:	bf00      	nop
 80034ac:	e004      	b.n	80034b8 <HAL_UART_IRQHandler+0x22c>
      return;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <HAL_UART_IRQHandler+0x22c>
    return;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_UART_IRQHandler+0x22c>
    return;
 80034b6:	bf00      	nop
  }

}
 80034b8:	3720      	adds	r7, #32
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	08003f2f 	.word	0x08003f2f

080034c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b083      	sub	sp, #12
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4aaa      	ldr	r2, [pc, #680]	; (80037ac <UART_SetConfig+0x2c0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d904      	bls.n	8003510 <UART_SetConfig+0x24>
 8003506:	f640 2151 	movw	r1, #2641	; 0xa51
 800350a:	48a9      	ldr	r0, [pc, #676]	; (80037b0 <UART_SetConfig+0x2c4>)
 800350c:	f001 f86f 	bl	80045ee <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003518:	d00d      	beq.n	8003536 <UART_SetConfig+0x4a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <UART_SetConfig+0x4a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800352a:	d004      	beq.n	8003536 <UART_SetConfig+0x4a>
 800352c:	f640 2152 	movw	r1, #2642	; 0xa52
 8003530:	489f      	ldr	r0, [pc, #636]	; (80037b0 <UART_SetConfig+0x2c4>)
 8003532:	f001 f85c 	bl	80045ee <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d012      	beq.n	8003566 <UART_SetConfig+0x7a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00e      	beq.n	8003566 <UART_SetConfig+0x7a>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003550:	d009      	beq.n	8003566 <UART_SetConfig+0x7a>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355a:	d004      	beq.n	8003566 <UART_SetConfig+0x7a>
 800355c:	f640 2153 	movw	r1, #2643	; 0xa53
 8003560:	4893      	ldr	r0, [pc, #588]	; (80037b0 <UART_SetConfig+0x2c4>)
 8003562:	f001 f844 	bl	80045ee <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <UART_SetConfig+0x96>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003576:	d004      	beq.n	8003582 <UART_SetConfig+0x96>
 8003578:	f640 2154 	movw	r1, #2644	; 0xa54
 800357c:	488c      	ldr	r0, [pc, #560]	; (80037b0 <UART_SetConfig+0x2c4>)
 800357e:	f001 f836 	bl	80045ee <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00e      	beq.n	80035a8 <UART_SetConfig+0xbc>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003592:	d009      	beq.n	80035a8 <UART_SetConfig+0xbc>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800359c:	d004      	beq.n	80035a8 <UART_SetConfig+0xbc>
 800359e:	f640 2156 	movw	r1, #2646	; 0xa56
 80035a2:	4883      	ldr	r0, [pc, #524]	; (80037b0 <UART_SetConfig+0x2c4>)
 80035a4:	f001 f823 	bl	80045ee <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f023 030c 	bic.w	r3, r3, #12
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d103      	bne.n	80035bc <UART_SetConfig+0xd0>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <UART_SetConfig+0xda>
 80035bc:	f640 2157 	movw	r1, #2647	; 0xa57
 80035c0:	487b      	ldr	r0, [pc, #492]	; (80037b0 <UART_SetConfig+0x2c4>)
 80035c2:	f001 f814 	bl	80045ee <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d013      	beq.n	80035f6 <UART_SetConfig+0x10a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d6:	d00e      	beq.n	80035f6 <UART_SetConfig+0x10a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035e0:	d009      	beq.n	80035f6 <UART_SetConfig+0x10a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035ea:	d004      	beq.n	80035f6 <UART_SetConfig+0x10a>
 80035ec:	f640 2158 	movw	r1, #2648	; 0xa58
 80035f0:	486f      	ldr	r0, [pc, #444]	; (80037b0 <UART_SetConfig+0x2c4>)
 80035f2:	f000 fffc 	bl	80045ee <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d009      	beq.n	8003612 <UART_SetConfig+0x126>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69db      	ldr	r3, [r3, #28]
 8003602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003606:	d004      	beq.n	8003612 <UART_SetConfig+0x126>
 8003608:	f640 2159 	movw	r1, #2649	; 0xa59
 800360c:	4868      	ldr	r0, [pc, #416]	; (80037b0 <UART_SetConfig+0x2c4>)
 800360e:	f000 ffee 	bl	80045ee <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689a      	ldr	r2, [r3, #8]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	4b60      	ldr	r3, [pc, #384]	; (80037b4 <UART_SetConfig+0x2c8>)
 8003632:	4013      	ands	r3, r2
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	6939      	ldr	r1, [r7, #16]
 800363a:	430b      	orrs	r3, r1
 800363c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68da      	ldr	r2, [r3, #12]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a4e      	ldr	r2, [pc, #312]	; (80037b8 <UART_SetConfig+0x2cc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d122      	bne.n	80036c8 <UART_SetConfig+0x1dc>
 8003682:	4b4e      	ldr	r3, [pc, #312]	; (80037bc <UART_SetConfig+0x2d0>)
 8003684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003688:	f003 0303 	and.w	r3, r3, #3
 800368c:	2b03      	cmp	r3, #3
 800368e:	d817      	bhi.n	80036c0 <UART_SetConfig+0x1d4>
 8003690:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <UART_SetConfig+0x1ac>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036a9 	.word	0x080036a9
 800369c:	080036b5 	.word	0x080036b5
 80036a0:	080036af 	.word	0x080036af
 80036a4:	080036bb 	.word	0x080036bb
 80036a8:	2301      	movs	r3, #1
 80036aa:	77fb      	strb	r3, [r7, #31]
 80036ac:	e14d      	b.n	800394a <UART_SetConfig+0x45e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	77fb      	strb	r3, [r7, #31]
 80036b2:	e14a      	b.n	800394a <UART_SetConfig+0x45e>
 80036b4:	2304      	movs	r3, #4
 80036b6:	77fb      	strb	r3, [r7, #31]
 80036b8:	e147      	b.n	800394a <UART_SetConfig+0x45e>
 80036ba:	2308      	movs	r3, #8
 80036bc:	77fb      	strb	r3, [r7, #31]
 80036be:	e144      	b.n	800394a <UART_SetConfig+0x45e>
 80036c0:	2310      	movs	r3, #16
 80036c2:	77fb      	strb	r3, [r7, #31]
 80036c4:	bf00      	nop
 80036c6:	e140      	b.n	800394a <UART_SetConfig+0x45e>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a3c      	ldr	r2, [pc, #240]	; (80037c0 <UART_SetConfig+0x2d4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d134      	bne.n	800373c <UART_SetConfig+0x250>
 80036d2:	4b3a      	ldr	r3, [pc, #232]	; (80037bc <UART_SetConfig+0x2d0>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d8:	f003 030c 	and.w	r3, r3, #12
 80036dc:	2b0c      	cmp	r3, #12
 80036de:	d829      	bhi.n	8003734 <UART_SetConfig+0x248>
 80036e0:	a201      	add	r2, pc, #4	; (adr r2, 80036e8 <UART_SetConfig+0x1fc>)
 80036e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036e6:	bf00      	nop
 80036e8:	0800371d 	.word	0x0800371d
 80036ec:	08003735 	.word	0x08003735
 80036f0:	08003735 	.word	0x08003735
 80036f4:	08003735 	.word	0x08003735
 80036f8:	08003729 	.word	0x08003729
 80036fc:	08003735 	.word	0x08003735
 8003700:	08003735 	.word	0x08003735
 8003704:	08003735 	.word	0x08003735
 8003708:	08003723 	.word	0x08003723
 800370c:	08003735 	.word	0x08003735
 8003710:	08003735 	.word	0x08003735
 8003714:	08003735 	.word	0x08003735
 8003718:	0800372f 	.word	0x0800372f
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
 8003720:	e113      	b.n	800394a <UART_SetConfig+0x45e>
 8003722:	2302      	movs	r3, #2
 8003724:	77fb      	strb	r3, [r7, #31]
 8003726:	e110      	b.n	800394a <UART_SetConfig+0x45e>
 8003728:	2304      	movs	r3, #4
 800372a:	77fb      	strb	r3, [r7, #31]
 800372c:	e10d      	b.n	800394a <UART_SetConfig+0x45e>
 800372e:	2308      	movs	r3, #8
 8003730:	77fb      	strb	r3, [r7, #31]
 8003732:	e10a      	b.n	800394a <UART_SetConfig+0x45e>
 8003734:	2310      	movs	r3, #16
 8003736:	77fb      	strb	r3, [r7, #31]
 8003738:	bf00      	nop
 800373a:	e106      	b.n	800394a <UART_SetConfig+0x45e>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <UART_SetConfig+0x2d8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d120      	bne.n	8003788 <UART_SetConfig+0x29c>
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <UART_SetConfig+0x2d0>)
 8003748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003750:	2b10      	cmp	r3, #16
 8003752:	d00f      	beq.n	8003774 <UART_SetConfig+0x288>
 8003754:	2b10      	cmp	r3, #16
 8003756:	d802      	bhi.n	800375e <UART_SetConfig+0x272>
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <UART_SetConfig+0x27c>
 800375c:	e010      	b.n	8003780 <UART_SetConfig+0x294>
 800375e:	2b20      	cmp	r3, #32
 8003760:	d005      	beq.n	800376e <UART_SetConfig+0x282>
 8003762:	2b30      	cmp	r3, #48	; 0x30
 8003764:	d009      	beq.n	800377a <UART_SetConfig+0x28e>
 8003766:	e00b      	b.n	8003780 <UART_SetConfig+0x294>
 8003768:	2300      	movs	r3, #0
 800376a:	77fb      	strb	r3, [r7, #31]
 800376c:	e0ed      	b.n	800394a <UART_SetConfig+0x45e>
 800376e:	2302      	movs	r3, #2
 8003770:	77fb      	strb	r3, [r7, #31]
 8003772:	e0ea      	b.n	800394a <UART_SetConfig+0x45e>
 8003774:	2304      	movs	r3, #4
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e0e7      	b.n	800394a <UART_SetConfig+0x45e>
 800377a:	2308      	movs	r3, #8
 800377c:	77fb      	strb	r3, [r7, #31]
 800377e:	e0e4      	b.n	800394a <UART_SetConfig+0x45e>
 8003780:	2310      	movs	r3, #16
 8003782:	77fb      	strb	r3, [r7, #31]
 8003784:	bf00      	nop
 8003786:	e0e0      	b.n	800394a <UART_SetConfig+0x45e>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0e      	ldr	r2, [pc, #56]	; (80037c8 <UART_SetConfig+0x2dc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d131      	bne.n	80037f6 <UART_SetConfig+0x30a>
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <UART_SetConfig+0x2d0>)
 8003794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003798:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800379c:	2b40      	cmp	r3, #64	; 0x40
 800379e:	d020      	beq.n	80037e2 <UART_SetConfig+0x2f6>
 80037a0:	2b40      	cmp	r3, #64	; 0x40
 80037a2:	d813      	bhi.n	80037cc <UART_SetConfig+0x2e0>
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d016      	beq.n	80037d6 <UART_SetConfig+0x2ea>
 80037a8:	e021      	b.n	80037ee <UART_SetConfig+0x302>
 80037aa:	bf00      	nop
 80037ac:	019bfcc0 	.word	0x019bfcc0
 80037b0:	08005240 	.word	0x08005240
 80037b4:	efff69f3 	.word	0xefff69f3
 80037b8:	40011000 	.word	0x40011000
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40004400 	.word	0x40004400
 80037c4:	40004800 	.word	0x40004800
 80037c8:	40004c00 	.word	0x40004c00
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d005      	beq.n	80037dc <UART_SetConfig+0x2f0>
 80037d0:	2bc0      	cmp	r3, #192	; 0xc0
 80037d2:	d009      	beq.n	80037e8 <UART_SetConfig+0x2fc>
 80037d4:	e00b      	b.n	80037ee <UART_SetConfig+0x302>
 80037d6:	2300      	movs	r3, #0
 80037d8:	77fb      	strb	r3, [r7, #31]
 80037da:	e0b6      	b.n	800394a <UART_SetConfig+0x45e>
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
 80037e0:	e0b3      	b.n	800394a <UART_SetConfig+0x45e>
 80037e2:	2304      	movs	r3, #4
 80037e4:	77fb      	strb	r3, [r7, #31]
 80037e6:	e0b0      	b.n	800394a <UART_SetConfig+0x45e>
 80037e8:	2308      	movs	r3, #8
 80037ea:	77fb      	strb	r3, [r7, #31]
 80037ec:	e0ad      	b.n	800394a <UART_SetConfig+0x45e>
 80037ee:	2310      	movs	r3, #16
 80037f0:	77fb      	strb	r3, [r7, #31]
 80037f2:	bf00      	nop
 80037f4:	e0a9      	b.n	800394a <UART_SetConfig+0x45e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4aaf      	ldr	r2, [pc, #700]	; (8003ab8 <UART_SetConfig+0x5cc>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d124      	bne.n	800384a <UART_SetConfig+0x35e>
 8003800:	4bae      	ldr	r3, [pc, #696]	; (8003abc <UART_SetConfig+0x5d0>)
 8003802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d012      	beq.n	8003836 <UART_SetConfig+0x34a>
 8003810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003814:	d802      	bhi.n	800381c <UART_SetConfig+0x330>
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <UART_SetConfig+0x33e>
 800381a:	e012      	b.n	8003842 <UART_SetConfig+0x356>
 800381c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003820:	d006      	beq.n	8003830 <UART_SetConfig+0x344>
 8003822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003826:	d009      	beq.n	800383c <UART_SetConfig+0x350>
 8003828:	e00b      	b.n	8003842 <UART_SetConfig+0x356>
 800382a:	2300      	movs	r3, #0
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e08c      	b.n	800394a <UART_SetConfig+0x45e>
 8003830:	2302      	movs	r3, #2
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e089      	b.n	800394a <UART_SetConfig+0x45e>
 8003836:	2304      	movs	r3, #4
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e086      	b.n	800394a <UART_SetConfig+0x45e>
 800383c:	2308      	movs	r3, #8
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e083      	b.n	800394a <UART_SetConfig+0x45e>
 8003842:	2310      	movs	r3, #16
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	bf00      	nop
 8003848:	e07f      	b.n	800394a <UART_SetConfig+0x45e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a9c      	ldr	r2, [pc, #624]	; (8003ac0 <UART_SetConfig+0x5d4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d124      	bne.n	800389e <UART_SetConfig+0x3b2>
 8003854:	4b99      	ldr	r3, [pc, #612]	; (8003abc <UART_SetConfig+0x5d0>)
 8003856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800385e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003862:	d012      	beq.n	800388a <UART_SetConfig+0x39e>
 8003864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003868:	d802      	bhi.n	8003870 <UART_SetConfig+0x384>
 800386a:	2b00      	cmp	r3, #0
 800386c:	d007      	beq.n	800387e <UART_SetConfig+0x392>
 800386e:	e012      	b.n	8003896 <UART_SetConfig+0x3aa>
 8003870:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003874:	d006      	beq.n	8003884 <UART_SetConfig+0x398>
 8003876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800387a:	d009      	beq.n	8003890 <UART_SetConfig+0x3a4>
 800387c:	e00b      	b.n	8003896 <UART_SetConfig+0x3aa>
 800387e:	2301      	movs	r3, #1
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e062      	b.n	800394a <UART_SetConfig+0x45e>
 8003884:	2302      	movs	r3, #2
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e05f      	b.n	800394a <UART_SetConfig+0x45e>
 800388a:	2304      	movs	r3, #4
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e05c      	b.n	800394a <UART_SetConfig+0x45e>
 8003890:	2308      	movs	r3, #8
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e059      	b.n	800394a <UART_SetConfig+0x45e>
 8003896:	2310      	movs	r3, #16
 8003898:	77fb      	strb	r3, [r7, #31]
 800389a:	bf00      	nop
 800389c:	e055      	b.n	800394a <UART_SetConfig+0x45e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a88      	ldr	r2, [pc, #544]	; (8003ac4 <UART_SetConfig+0x5d8>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d124      	bne.n	80038f2 <UART_SetConfig+0x406>
 80038a8:	4b84      	ldr	r3, [pc, #528]	; (8003abc <UART_SetConfig+0x5d0>)
 80038aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038b6:	d012      	beq.n	80038de <UART_SetConfig+0x3f2>
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038bc:	d802      	bhi.n	80038c4 <UART_SetConfig+0x3d8>
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <UART_SetConfig+0x3e6>
 80038c2:	e012      	b.n	80038ea <UART_SetConfig+0x3fe>
 80038c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x3ec>
 80038ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038ce:	d009      	beq.n	80038e4 <UART_SetConfig+0x3f8>
 80038d0:	e00b      	b.n	80038ea <UART_SetConfig+0x3fe>
 80038d2:	2300      	movs	r3, #0
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e038      	b.n	800394a <UART_SetConfig+0x45e>
 80038d8:	2302      	movs	r3, #2
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e035      	b.n	800394a <UART_SetConfig+0x45e>
 80038de:	2304      	movs	r3, #4
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e032      	b.n	800394a <UART_SetConfig+0x45e>
 80038e4:	2308      	movs	r3, #8
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e02f      	b.n	800394a <UART_SetConfig+0x45e>
 80038ea:	2310      	movs	r3, #16
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	bf00      	nop
 80038f0:	e02b      	b.n	800394a <UART_SetConfig+0x45e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a74      	ldr	r2, [pc, #464]	; (8003ac8 <UART_SetConfig+0x5dc>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d124      	bne.n	8003946 <UART_SetConfig+0x45a>
 80038fc:	4b6f      	ldr	r3, [pc, #444]	; (8003abc <UART_SetConfig+0x5d0>)
 80038fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003902:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800390a:	d012      	beq.n	8003932 <UART_SetConfig+0x446>
 800390c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003910:	d802      	bhi.n	8003918 <UART_SetConfig+0x42c>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <UART_SetConfig+0x43a>
 8003916:	e012      	b.n	800393e <UART_SetConfig+0x452>
 8003918:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391c:	d006      	beq.n	800392c <UART_SetConfig+0x440>
 800391e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003922:	d009      	beq.n	8003938 <UART_SetConfig+0x44c>
 8003924:	e00b      	b.n	800393e <UART_SetConfig+0x452>
 8003926:	2300      	movs	r3, #0
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e00e      	b.n	800394a <UART_SetConfig+0x45e>
 800392c:	2302      	movs	r3, #2
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e00b      	b.n	800394a <UART_SetConfig+0x45e>
 8003932:	2304      	movs	r3, #4
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e008      	b.n	800394a <UART_SetConfig+0x45e>
 8003938:	2308      	movs	r3, #8
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e005      	b.n	800394a <UART_SetConfig+0x45e>
 800393e:	2310      	movs	r3, #16
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	bf00      	nop
 8003944:	e001      	b.n	800394a <UART_SetConfig+0x45e>
 8003946:	2310      	movs	r3, #16
 8003948:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003952:	d17c      	bne.n	8003a4e <UART_SetConfig+0x562>
  {
    switch (clocksource)
 8003954:	7ffb      	ldrb	r3, [r7, #31]
 8003956:	2b08      	cmp	r3, #8
 8003958:	d859      	bhi.n	8003a0e <UART_SetConfig+0x522>
 800395a:	a201      	add	r2, pc, #4	; (adr r2, 8003960 <UART_SetConfig+0x474>)
 800395c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003960:	08003985 	.word	0x08003985
 8003964:	080039a3 	.word	0x080039a3
 8003968:	080039c1 	.word	0x080039c1
 800396c:	08003a0f 	.word	0x08003a0f
 8003970:	080039d9 	.word	0x080039d9
 8003974:	08003a0f 	.word	0x08003a0f
 8003978:	08003a0f 	.word	0x08003a0f
 800397c:	08003a0f 	.word	0x08003a0f
 8003980:	080039f7 	.word	0x080039f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003984:	f7fe f99e 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8003988:	4603      	mov	r3, r0
 800398a:	005a      	lsls	r2, r3, #1
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	441a      	add	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	b29b      	uxth	r3, r3
 800399e:	61bb      	str	r3, [r7, #24]
        break;
 80039a0:	e038      	b.n	8003a14 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80039a2:	f7fe f9a3 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 80039a6:	4603      	mov	r3, r0
 80039a8:	005a      	lsls	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	441a      	add	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	61bb      	str	r3, [r7, #24]
        break;
 80039be:	e029      	b.n	8003a14 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	085a      	lsrs	r2, r3, #1
 80039c6:	4b41      	ldr	r3, [pc, #260]	; (8003acc <UART_SetConfig+0x5e0>)
 80039c8:	4413      	add	r3, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6852      	ldr	r2, [r2, #4]
 80039ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	61bb      	str	r3, [r7, #24]
        break;
 80039d6:	e01d      	b.n	8003a14 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80039d8:	f7fe f890 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 80039dc:	4603      	mov	r3, r0
 80039de:	005a      	lsls	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	085b      	lsrs	r3, r3, #1
 80039e6:	441a      	add	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e00e      	b.n	8003a14 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	61bb      	str	r3, [r7, #24]
        break;
 8003a0c:	e002      	b.n	8003a14 <UART_SetConfig+0x528>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	75fb      	strb	r3, [r7, #23]
        break;
 8003a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d916      	bls.n	8003a48 <UART_SetConfig+0x55c>
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d212      	bcs.n	8003a48 <UART_SetConfig+0x55c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f023 030f 	bic.w	r3, r3, #15
 8003a2a:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	89fb      	ldrh	r3, [r7, #14]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	89fa      	ldrh	r2, [r7, #14]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	e07a      	b.n	8003b3e <UART_SetConfig+0x652>
    }
    else
    {
      ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75fb      	strb	r3, [r7, #23]
 8003a4c:	e077      	b.n	8003b3e <UART_SetConfig+0x652>
    }
  }
  else
  {
    switch (clocksource)
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d863      	bhi.n	8003b1c <UART_SetConfig+0x630>
 8003a54:	a201      	add	r2, pc, #4	; (adr r2, 8003a5c <UART_SetConfig+0x570>)
 8003a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a5a:	bf00      	nop
 8003a5c:	08003a81 	.word	0x08003a81
 8003a60:	08003a9d 	.word	0x08003a9d
 8003a64:	08003ad1 	.word	0x08003ad1
 8003a68:	08003b1d 	.word	0x08003b1d
 8003a6c:	08003ae9 	.word	0x08003ae9
 8003a70:	08003b1d 	.word	0x08003b1d
 8003a74:	08003b1d 	.word	0x08003b1d
 8003a78:	08003b1d 	.word	0x08003b1d
 8003a7c:	08003b05 	.word	0x08003b05
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a80:	f7fe f920 	bl	8001cc4 <HAL_RCC_GetPCLK1Freq>
 8003a84:	4602      	mov	r2, r0
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	61bb      	str	r3, [r7, #24]
        break;
 8003a9a:	e042      	b.n	8003b22 <UART_SetConfig+0x636>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a9c:	f7fe f926 	bl	8001cec <HAL_RCC_GetPCLK2Freq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	441a      	add	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	61bb      	str	r3, [r7, #24]
        break;
 8003ab6:	e034      	b.n	8003b22 <UART_SetConfig+0x636>
 8003ab8:	40005000 	.word	0x40005000
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40011400 	.word	0x40011400
 8003ac4:	40007800 	.word	0x40007800
 8003ac8:	40007c00 	.word	0x40007c00
 8003acc:	01e84800 	.word	0x01e84800
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	085a      	lsrs	r2, r3, #1
 8003ad6:	4b1f      	ldr	r3, [pc, #124]	; (8003b54 <UART_SetConfig+0x668>)
 8003ad8:	4413      	add	r3, r2
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6852      	ldr	r2, [r2, #4]
 8003ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
        break;
 8003ae6:	e01c      	b.n	8003b22 <UART_SetConfig+0x636>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ae8:	f7fe f808 	bl	8001afc <HAL_RCC_GetSysClockFreq>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	61bb      	str	r3, [r7, #24]
        break;
 8003b02:	e00e      	b.n	8003b22 <UART_SetConfig+0x636>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	61bb      	str	r3, [r7, #24]
        break;
 8003b1a:	e002      	b.n	8003b22 <UART_SetConfig+0x636>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	75fb      	strb	r3, [r7, #23]
        break;
 8003b20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	2b0f      	cmp	r3, #15
 8003b26:	d908      	bls.n	8003b3a <UART_SetConfig+0x64e>
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2e:	d204      	bcs.n	8003b3a <UART_SetConfig+0x64e>
    {
      huart->Instance->BRR = usartdiv;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	60da      	str	r2, [r3, #12]
 8003b38:	e001      	b.n	8003b3e <UART_SetConfig+0x652>
    }
    else
    {
      ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3720      	adds	r7, #32
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	00f42400 	.word	0x00f42400

08003b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2bff      	cmp	r3, #255	; 0xff
 8003b66:	d904      	bls.n	8003b72 <UART_AdvFeatureConfig+0x1a>
 8003b68:	f640 21d2 	movw	r1, #2770	; 0xad2
 8003b6c:	489f      	ldr	r0, [pc, #636]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003b6e:	f000 fd3e 	bl	80045ee <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d009      	beq.n	8003b9a <UART_AdvFeatureConfig+0x42>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8e:	d004      	beq.n	8003b9a <UART_AdvFeatureConfig+0x42>
 8003b90:	f640 21d7 	movw	r1, #2775	; 0xad7
 8003b94:	4895      	ldr	r0, [pc, #596]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003b96:	f000 fd2a 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d018      	beq.n	8003bee <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x80>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bcc:	d004      	beq.n	8003bd8 <UART_AdvFeatureConfig+0x80>
 8003bce:	f640 21de 	movw	r1, #2782	; 0xade
 8003bd2:	4886      	ldr	r0, [pc, #536]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003bd4:	f000 fd0b 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d018      	beq.n	8003c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <UART_AdvFeatureConfig+0xbe>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c0a:	d004      	beq.n	8003c16 <UART_AdvFeatureConfig+0xbe>
 8003c0c:	f640 21e5 	movw	r1, #2789	; 0xae5
 8003c10:	4876      	ldr	r0, [pc, #472]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003c12:	f000 fcec 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0308 	and.w	r3, r3, #8
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d018      	beq.n	8003c6a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <UART_AdvFeatureConfig+0xfc>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d004      	beq.n	8003c54 <UART_AdvFeatureConfig+0xfc>
 8003c4a:	f640 21ec 	movw	r1, #2796	; 0xaec
 8003c4e:	4867      	ldr	r0, [pc, #412]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003c50:	f000 fccd 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d018      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <UART_AdvFeatureConfig+0x13a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d004      	beq.n	8003c92 <UART_AdvFeatureConfig+0x13a>
 8003c88:	f640 21f3 	movw	r1, #2803	; 0xaf3
 8003c8c:	4857      	ldr	r0, [pc, #348]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003c8e:	f000 fcae 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cac:	f003 0320 	and.w	r3, r3, #32
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d018      	beq.n	8003ce6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d009      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x178>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cc4:	d004      	beq.n	8003cd0 <UART_AdvFeatureConfig+0x178>
 8003cc6:	f640 21fa 	movw	r1, #2810	; 0xafa
 8003cca:	4848      	ldr	r0, [pc, #288]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003ccc:	f000 fc8f 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d059      	beq.n	8003da6 <UART_AdvFeatureConfig+0x24e>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3e      	ldr	r2, [pc, #248]	; (8003df0 <UART_AdvFeatureConfig+0x298>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d013      	beq.n	8003d24 <UART_AdvFeatureConfig+0x1cc>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3c      	ldr	r2, [pc, #240]	; (8003df4 <UART_AdvFeatureConfig+0x29c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00e      	beq.n	8003d24 <UART_AdvFeatureConfig+0x1cc>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3b      	ldr	r2, [pc, #236]	; (8003df8 <UART_AdvFeatureConfig+0x2a0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d009      	beq.n	8003d24 <UART_AdvFeatureConfig+0x1cc>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a39      	ldr	r2, [pc, #228]	; (8003dfc <UART_AdvFeatureConfig+0x2a4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d004      	beq.n	8003d24 <UART_AdvFeatureConfig+0x1cc>
 8003d1a:	f640 3101 	movw	r1, #2817	; 0xb01
 8003d1e:	4833      	ldr	r0, [pc, #204]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003d20:	f000 fc65 	bl	80045ee <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d009      	beq.n	8003d40 <UART_AdvFeatureConfig+0x1e8>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d34:	d004      	beq.n	8003d40 <UART_AdvFeatureConfig+0x1e8>
 8003d36:	f640 3102 	movw	r1, #2818	; 0xb02
 8003d3a:	482c      	ldr	r0, [pc, #176]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003d3c:	f000 fc57 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d5e:	d122      	bne.n	8003da6 <UART_AdvFeatureConfig+0x24e>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <UART_AdvFeatureConfig+0x238>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d70:	d00e      	beq.n	8003d90 <UART_AdvFeatureConfig+0x238>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7a:	d009      	beq.n	8003d90 <UART_AdvFeatureConfig+0x238>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d80:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003d84:	d004      	beq.n	8003d90 <UART_AdvFeatureConfig+0x238>
 8003d86:	f640 3107 	movw	r1, #2823	; 0xb07
 8003d8a:	4818      	ldr	r0, [pc, #96]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003d8c:	f000 fc2f 	bl	80045ee <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d018      	beq.n	8003de4 <UART_AdvFeatureConfig+0x28c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <UART_AdvFeatureConfig+0x276>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dc2:	d004      	beq.n	8003dce <UART_AdvFeatureConfig+0x276>
 8003dc4:	f640 310f 	movw	r1, #2831	; 0xb0f
 8003dc8:	4808      	ldr	r0, [pc, #32]	; (8003dec <UART_AdvFeatureConfig+0x294>)
 8003dca:	f000 fc10 	bl	80045ee <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]
  }
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	08005240 	.word	0x08005240
 8003df0:	40011000 	.word	0x40011000
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40004800 	.word	0x40004800
 8003dfc:	40011400 	.word	0x40011400

08003e00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af02      	add	r7, sp, #8
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e0e:	f7fc fc41 	bl	8000694 <HAL_GetTick>
 8003e12:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d10e      	bne.n	8003e40 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e26:	9300      	str	r3, [sp, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 f814 	bl	8003e5e <UART_WaitOnFlagUntilTimeout>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e00a      	b.n	8003e56 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}

08003e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e5e:	b580      	push	{r7, lr}
 8003e60:	b084      	sub	sp, #16
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	60f8      	str	r0, [r7, #12]
 8003e66:	60b9      	str	r1, [r7, #8]
 8003e68:	603b      	str	r3, [r7, #0]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e6e:	e02a      	b.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e76:	d026      	beq.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e78:	f7fc fc0c 	bl	8000694 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d302      	bcc.n	8003e8e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d11b      	bne.n	8003ec6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e00f      	b.n	8003ee6 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69da      	ldr	r2, [r3, #28]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	bf0c      	ite	eq
 8003ed6:	2301      	moveq	r3, #1
 8003ed8:	2300      	movne	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d0c5      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eee:	b480      	push	{r7}
 8003ef0:	b083      	sub	sp, #12
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f04:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff fac3 	bl	80034d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f66:	2b21      	cmp	r3, #33	; 0x21
 8003f68:	d12a      	bne.n	8003fc0 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d110      	bne.n	8003f98 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f84:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f94:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f96:	e013      	b.n	8003fc0 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9c:	781a      	ldrb	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd8:	2b21      	cmp	r3, #33	; 0x21
 8003fda:	d12f      	bne.n	800403c <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d110      	bne.n	800400a <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ff6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004006:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004008:	e018      	b.n	800403c <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004024:	1c9a      	adds	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004030:	b29b      	uxth	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	b29a      	uxth	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff fa29 	bl	80034c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004088:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408e:	2b22      	cmp	r3, #34	; 0x22
 8004090:	d13a      	bne.n	8004108 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800409a:	89bb      	ldrh	r3, [r7, #12]
 800409c:	b2d9      	uxtb	r1, r3
 800409e:	89fb      	ldrh	r3, [r7, #14]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	400a      	ands	r2, r1
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d121      	bne.n	8004118 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80040e2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f9f1 	bl	80044e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004106:	e007      	b.n	8004118 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0208 	orr.w	r2, r2, #8
 8004116:	619a      	str	r2, [r3, #24]
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800412e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004134:	2b22      	cmp	r3, #34	; 0x22
 8004136:	d13a      	bne.n	80041ae <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8004146:	89ba      	ldrh	r2, [r7, #12]
 8004148:	89fb      	ldrh	r3, [r7, #14]
 800414a:	4013      	ands	r3, r2
 800414c:	b29a      	uxth	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004156:	1c9a      	adds	r2, r3, #2
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d121      	bne.n	80041be <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004188:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689a      	ldr	r2, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2220      	movs	r2, #32
 800419e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f99e 	bl	80044e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80041ac:	e007      	b.n	80041be <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699a      	ldr	r2, [r3, #24]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0208 	orr.w	r2, r2, #8
 80041bc:	619a      	str	r2, [r3, #24]
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041ca:	f7fc fa11 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041ce:	f000 f80b 	bl	80041e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041d2:	f000 f8fd 	bl	80043d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80041d6:	f000 f8cb 	bl	8004370 <MX_USART3_UART_Init>
  MX_UART4_Init();
 80041da:	f000 f899 	bl	8004310 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 80041de:	f000 f933 	bl	8004448 <GPS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPS_Process();
 80041e2:	f000 f9b1 	bl	8004548 <GPS_Process>
 80041e6:	e7fc      	b.n	80041e2 <main+0x1c>

080041e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0b8      	sub	sp, #224	; 0xe0
 80041ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80041f2:	2234      	movs	r2, #52	; 0x34
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f000 fb92 	bl	8004920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	605a      	str	r2, [r3, #4]
 8004206:	609a      	str	r2, [r3, #8]
 8004208:	60da      	str	r2, [r3, #12]
 800420a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800420c:	f107 0308 	add.w	r3, r7, #8
 8004210:	2290      	movs	r2, #144	; 0x90
 8004212:	2100      	movs	r1, #0
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fb83 	bl	8004920 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800421a:	f7fc ff33 	bl	8001084 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800421e:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <SystemClock_Config+0x120>)
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	4a39      	ldr	r2, [pc, #228]	; (8004308 <SystemClock_Config+0x120>)
 8004224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004228:	6413      	str	r3, [r2, #64]	; 0x40
 800422a:	4b37      	ldr	r3, [pc, #220]	; (8004308 <SystemClock_Config+0x120>)
 800422c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	607b      	str	r3, [r7, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8004236:	4b35      	ldr	r3, [pc, #212]	; (800430c <SystemClock_Config+0x124>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800423e:	4a33      	ldr	r2, [pc, #204]	; (800430c <SystemClock_Config+0x124>)
 8004240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004244:	6013      	str	r3, [r2, #0]
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <SystemClock_Config+0x124>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800424e:	603b      	str	r3, [r7, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004252:	2301      	movs	r3, #1
 8004254:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800425c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004260:	2302      	movs	r3, #2
 8004262:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800426a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800426e:	2304      	movs	r3, #4
 8004270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8004274:	2360      	movs	r3, #96	; 0x60
 8004276:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800427a:	2302      	movs	r3, #2
 800427c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004280:	2304      	movs	r3, #4
 8004282:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004286:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800428a:	4618      	mov	r0, r3
 800428c:	f7fc ff5a 	bl	8001144 <HAL_RCC_OscConfig>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004296:	f000 f9a3 	bl	80045e0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800429a:	f7fc ff03 	bl	80010a4 <HAL_PWREx_EnableOverDrive>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80042a4:	f000 f99c 	bl	80045e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80042a8:	230f      	movs	r3, #15
 80042aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80042ae:	2302      	movs	r3, #2
 80042b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80042b4:	2300      	movs	r3, #0
 80042b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80042ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80042c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042cc:	2103      	movs	r1, #3
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fa70 	bl	80017b4 <HAL_RCC_ClockConfig>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80042da:	f000 f981 	bl	80045e0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4;
 80042de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042e2:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80042e4:	2300      	movs	r3, #0
 80042e6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80042e8:	2300      	movs	r3, #0
 80042ea:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fd fd0f 	bl	8001d14 <HAL_RCCEx_PeriphCLKConfig>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <SystemClock_Config+0x118>
  {
    Error_Handler();
 80042fc:	f000 f970 	bl	80045e0 <Error_Handler>
  }
}
 8004300:	bf00      	nop
 8004302:	37e0      	adds	r7, #224	; 0xe0
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40023800 	.word	0x40023800
 800430c:	40007000 	.word	0x40007000

08004310 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004314:	4b14      	ldr	r3, [pc, #80]	; (8004368 <MX_UART4_Init+0x58>)
 8004316:	4a15      	ldr	r2, [pc, #84]	; (800436c <MX_UART4_Init+0x5c>)
 8004318:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800431a:	4b13      	ldr	r3, [pc, #76]	; (8004368 <MX_UART4_Init+0x58>)
 800431c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004320:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004322:	4b11      	ldr	r3, [pc, #68]	; (8004368 <MX_UART4_Init+0x58>)
 8004324:	2200      	movs	r2, #0
 8004326:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <MX_UART4_Init+0x58>)
 800432a:	2200      	movs	r2, #0
 800432c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <MX_UART4_Init+0x58>)
 8004330:	2200      	movs	r2, #0
 8004332:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <MX_UART4_Init+0x58>)
 8004336:	220c      	movs	r2, #12
 8004338:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800433a:	4b0b      	ldr	r3, [pc, #44]	; (8004368 <MX_UART4_Init+0x58>)
 800433c:	2200      	movs	r2, #0
 800433e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004340:	4b09      	ldr	r3, [pc, #36]	; (8004368 <MX_UART4_Init+0x58>)
 8004342:	2200      	movs	r2, #0
 8004344:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004346:	4b08      	ldr	r3, [pc, #32]	; (8004368 <MX_UART4_Init+0x58>)
 8004348:	2200      	movs	r2, #0
 800434a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <MX_UART4_Init+0x58>)
 800434e:	2200      	movs	r2, #0
 8004350:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004352:	4805      	ldr	r0, [pc, #20]	; (8004368 <MX_UART4_Init+0x58>)
 8004354:	f7fe fd4a 	bl	8002dec <HAL_UART_Init>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800435e:	f000 f93f 	bl	80045e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20000324 	.word	0x20000324
 800436c:	40004c00 	.word	0x40004c00

08004370 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004374:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <MX_USART3_UART_Init+0x5c>)
 8004378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800437a:	4b13      	ldr	r3, [pc, #76]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 800437c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 8004384:	2200      	movs	r2, #0
 8004386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 800438a:	2200      	movs	r2, #0
 800438c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800438e:	4b0e      	ldr	r3, [pc, #56]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 8004390:	2200      	movs	r2, #0
 8004392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004394:	4b0c      	ldr	r3, [pc, #48]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 8004396:	220c      	movs	r2, #12
 8004398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 800439c:	2200      	movs	r2, #0
 800439e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80043a0:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80043b2:	4805      	ldr	r0, [pc, #20]	; (80043c8 <MX_USART3_UART_Init+0x58>)
 80043b4:	f7fe fd1a 	bl	8002dec <HAL_UART_Init>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80043be:	f000 f90f 	bl	80045e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80043c2:	bf00      	nop
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	2000009c 	.word	0x2000009c
 80043cc:	40004800 	.word	0x40004800

080043d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80043d6:	4b1b      	ldr	r3, [pc, #108]	; (8004444 <MX_GPIO_Init+0x74>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <MX_GPIO_Init+0x74>)
 80043dc:	f043 0304 	orr.w	r3, r3, #4
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <MX_GPIO_Init+0x74>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043ee:	4b15      	ldr	r3, [pc, #84]	; (8004444 <MX_GPIO_Init+0x74>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a14      	ldr	r2, [pc, #80]	; (8004444 <MX_GPIO_Init+0x74>)
 80043f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <MX_GPIO_Init+0x74>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	60bb      	str	r3, [r7, #8]
 8004404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <MX_GPIO_Init+0x74>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a0e      	ldr	r2, [pc, #56]	; (8004444 <MX_GPIO_Init+0x74>)
 800440c:	f043 0308 	orr.w	r3, r3, #8
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <MX_GPIO_Init+0x74>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <MX_GPIO_Init+0x74>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a08      	ldr	r2, [pc, #32]	; (8004444 <MX_GPIO_Init+0x74>)
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <MX_GPIO_Init+0x74>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	683b      	ldr	r3, [r7, #0]

}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800

08004448 <GPS_Init>:

/* USER CODE BEGIN 4 */

void GPS_Init(void) {
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b090      	sub	sp, #64	; 0x40
 800444c:	af00      	add	r7, sp, #0
	uint8_t buf[64];

	// turn on basic GGA(fix info) and RMC(location) info
	strcpy((char *)buf, "$PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0\r\n");
 800444e:	463b      	mov	r3, r7
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <GPS_Init+0x8c>)
 8004452:	461c      	mov	r4, r3
 8004454:	4615      	mov	r5, r2
 8004456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004462:	682b      	ldr	r3, [r5, #0]
 8004464:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit_IT(&huart4, (uint8_t *)buf, strlen((const char *)buf));
 8004466:	463b      	mov	r3, r7
 8004468:	4618      	mov	r0, r3
 800446a:	f7fb fee9 	bl	8000240 <strlen>
 800446e:	4603      	mov	r3, r0
 8004470:	b29a      	uxth	r2, r3
 8004472:	463b      	mov	r3, r7
 8004474:	4619      	mov	r1, r3
 8004476:	4818      	ldr	r0, [pc, #96]	; (80044d8 <GPS_Init+0x90>)
 8004478:	f7fe fe0a 	bl	8003090 <HAL_UART_Transmit_IT>
	memset(buf, 0, sizeof(buf));
 800447c:	463b      	mov	r3, r7
 800447e:	2240      	movs	r2, #64	; 0x40
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fa4c 	bl	8004920 <memset>

	// set update rate for once a second(1hz)
	// if set otherwise, make sure to change uart timeout
	strcpy((char *)buf, "$PMTK220,1000\r\n");
 8004488:	463b      	mov	r3, r7
 800448a:	4a14      	ldr	r2, [pc, #80]	; (80044dc <GPS_Init+0x94>)
 800448c:	461c      	mov	r4, r3
 800448e:	4613      	mov	r3, r2
 8004490:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004492:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit_IT(&huart4, (uint8_t *)buf, strlen((const char *)buf));
 8004496:	463b      	mov	r3, r7
 8004498:	4618      	mov	r0, r3
 800449a:	f7fb fed1 	bl	8000240 <strlen>
 800449e:	4603      	mov	r3, r0
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	463b      	mov	r3, r7
 80044a4:	4619      	mov	r1, r3
 80044a6:	480c      	ldr	r0, [pc, #48]	; (80044d8 <GPS_Init+0x90>)
 80044a8:	f7fe fdf2 	bl	8003090 <HAL_UART_Transmit_IT>
	memset(buf, 0, sizeof(buf));
 80044ac:	463b      	mov	r3, r7
 80044ae:	2240      	movs	r2, #64	; 0x40
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fa34 	bl	8004920 <memset>

	GPS.rxIndex = 0;
 80044b8:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <GPS_Init+0x98>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	HAL_UART_Receive_IT(&huart4, &GPS.rxTmp, 1);
 80044c0:	2201      	movs	r2, #1
 80044c2:	4908      	ldr	r1, [pc, #32]	; (80044e4 <GPS_Init+0x9c>)
 80044c4:	4804      	ldr	r0, [pc, #16]	; (80044d8 <GPS_Init+0x90>)
 80044c6:	f7fe fe3f 	bl	8003148 <HAL_UART_Receive_IT>
}
 80044ca:	bf00      	nop
 80044cc:	3740      	adds	r7, #64	; 0x40
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bdb0      	pop	{r4, r5, r7, pc}
 80044d2:	bf00      	nop
 80044d4:	0800527c 	.word	0x0800527c
 80044d8:	20000324 	.word	0x20000324
 80044dc:	080052b0 	.word	0x080052b0
 80044e0:	2000011c 	.word	0x2000011c
 80044e4:	2000031e 	.word	0x2000031e

080044e8 <HAL_UART_RxCpltCallback>:

/* ~~~~~ CALLBACK FUNCTION ~~~~~ */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	// record current tick time
	GPS.LastTime = HAL_GetTick();
 80044f0:	f7fc f8d0 	bl	8000694 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	4b11      	ldr	r3, [pc, #68]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 80044f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

	// if the current index is less than the buffer size
	// insert temp byte into buffer and incr index
	if(GPS.rxIndex < sizeof(GPS.rxBuffer) - 2) {
 80044fc:	4b0f      	ldr	r3, [pc, #60]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 80044fe:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8004502:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
 8004506:	d210      	bcs.n	800452a <HAL_UART_RxCpltCallback+0x42>
		GPS.rxBuffer[GPS.rxIndex] = GPS.rxTmp;
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 800450a:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 800450e:	461a      	mov	r2, r3
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 8004512:	f893 1202 	ldrb.w	r1, [r3, #514]	; 0x202
 8004516:	4b09      	ldr	r3, [pc, #36]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 8004518:	5499      	strb	r1, [r3, r2]
		GPS.rxIndex++;
 800451a:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 800451c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8004520:	3301      	adds	r3, #1
 8004522:	b29a      	uxth	r2, r3
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <HAL_UART_RxCpltCallback+0x54>)
 8004526:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}

	// receive the next byte
	HAL_UART_Receive_IT(&huart4, &GPS.rxTmp, 1);
 800452a:	2201      	movs	r2, #1
 800452c:	4904      	ldr	r1, [pc, #16]	; (8004540 <HAL_UART_RxCpltCallback+0x58>)
 800452e:	4805      	ldr	r0, [pc, #20]	; (8004544 <HAL_UART_RxCpltCallback+0x5c>)
 8004530:	f7fe fe0a 	bl	8003148 <HAL_UART_Receive_IT>
}
 8004534:	bf00      	nop
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	2000011c 	.word	0x2000011c
 8004540:	2000031e 	.word	0x2000031e
 8004544:	20000324 	.word	0x20000324

08004548 <GPS_Process>:

void GPS_Process(void) {
 8004548:	b580      	push	{r7, lr}
 800454a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800454e:	af00      	add	r7, sp, #0

	uint32_t CurrentTime = HAL_GetTick();
 8004550:	f7fc f8a0 	bl	8000694 <HAL_GetTick>
 8004554:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
	// print out data twice as fast as update rate(1hz)
	if( (CurrentTime - GPS.LastTime > 500) && (GPS.rxIndex > 0) ) {
 8004558:	4b1c      	ldr	r3, [pc, #112]	; (80045cc <GPS_Process+0x84>)
 800455a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800455e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004568:	d925      	bls.n	80045b6 <GPS_Process+0x6e>
 800456a:	4b18      	ldr	r3, [pc, #96]	; (80045cc <GPS_Process+0x84>)
 800456c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	; 0x200
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <GPS_Process+0x6e>
		GPS.LastTime = CurrentTime;
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <GPS_Process+0x84>)
 8004576:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800457a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
		uint8_t buf[513];

		sprintf((char *)buf, "%s\r\n", (char *)GPS.rxBuffer);
 800457e:	463b      	mov	r3, r7
 8004580:	4a12      	ldr	r2, [pc, #72]	; (80045cc <GPS_Process+0x84>)
 8004582:	4913      	ldr	r1, [pc, #76]	; (80045d0 <GPS_Process+0x88>)
 8004584:	4618      	mov	r0, r3
 8004586:	f000 f9d3 	bl	8004930 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*)buf, strlen((const char*)buf), HAL_MAX_DELAY);
 800458a:	463b      	mov	r3, r7
 800458c:	4618      	mov	r0, r3
 800458e:	f7fb fe57 	bl	8000240 <strlen>
 8004592:	4603      	mov	r3, r0
 8004594:	b29a      	uxth	r2, r3
 8004596:	4639      	mov	r1, r7
 8004598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800459c:	480d      	ldr	r0, [pc, #52]	; (80045d4 <GPS_Process+0x8c>)
 800459e:	f7fe fce5 	bl	8002f6c <HAL_UART_Transmit>

		memset(GPS.rxBuffer, 0, sizeof(GPS.rxBuffer));
 80045a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045a6:	2100      	movs	r1, #0
 80045a8:	4808      	ldr	r0, [pc, #32]	; (80045cc <GPS_Process+0x84>)
 80045aa:	f000 f9b9 	bl	8004920 <memset>
		GPS.rxIndex = 0;
 80045ae:	4b07      	ldr	r3, [pc, #28]	; (80045cc <GPS_Process+0x84>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	f8a3 2200 	strh.w	r2, [r3, #512]	; 0x200
	}
	HAL_UART_Receive_IT(&huart4, &GPS.rxTmp, 1);
 80045b6:	2201      	movs	r2, #1
 80045b8:	4907      	ldr	r1, [pc, #28]	; (80045d8 <GPS_Process+0x90>)
 80045ba:	4808      	ldr	r0, [pc, #32]	; (80045dc <GPS_Process+0x94>)
 80045bc:	f7fe fdc4 	bl	8003148 <HAL_UART_Receive_IT>
}
 80045c0:	bf00      	nop
 80045c2:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	2000011c 	.word	0x2000011c
 80045d0:	080052c0 	.word	0x080052c0
 80045d4:	2000009c 	.word	0x2000009c
 80045d8:	2000031e 	.word	0x2000031e
 80045dc:	20000324 	.word	0x20000324

080045e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	4b0f      	ldr	r3, [pc, #60]	; (8004648 <HAL_MspInit+0x44>)
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	4a0e      	ldr	r2, [pc, #56]	; (8004648 <HAL_MspInit+0x44>)
 8004610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004614:	6413      	str	r3, [r2, #64]	; 0x40
 8004616:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <HAL_MspInit+0x44>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461e:	607b      	str	r3, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004622:	4b09      	ldr	r3, [pc, #36]	; (8004648 <HAL_MspInit+0x44>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a08      	ldr	r2, [pc, #32]	; (8004648 <HAL_MspInit+0x44>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_MspInit+0x44>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40023800 	.word	0x40023800

0800464c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b08c      	sub	sp, #48	; 0x30
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004654:	f107 031c 	add.w	r3, r7, #28
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	609a      	str	r2, [r3, #8]
 8004660:	60da      	str	r2, [r3, #12]
 8004662:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a32      	ldr	r2, [pc, #200]	; (8004734 <HAL_UART_MspInit+0xe8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d130      	bne.n	80046d0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800466e:	4b32      	ldr	r3, [pc, #200]	; (8004738 <HAL_UART_MspInit+0xec>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a31      	ldr	r2, [pc, #196]	; (8004738 <HAL_UART_MspInit+0xec>)
 8004674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b2f      	ldr	r3, [pc, #188]	; (8004738 <HAL_UART_MspInit+0xec>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_UART_MspInit+0xec>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468a:	4a2b      	ldr	r2, [pc, #172]	; (8004738 <HAL_UART_MspInit+0xec>)
 800468c:	f043 0308 	orr.w	r3, r3, #8
 8004690:	6313      	str	r3, [r2, #48]	; 0x30
 8004692:	4b29      	ldr	r3, [pc, #164]	; (8004738 <HAL_UART_MspInit+0xec>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration    
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800469e:	2303      	movs	r3, #3
 80046a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a2:	2302      	movs	r3, #2
 80046a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046aa:	2303      	movs	r3, #3
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80046ae:	2308      	movs	r3, #8
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80046b2:	f107 031c 	add.w	r3, r7, #28
 80046b6:	4619      	mov	r1, r3
 80046b8:	4820      	ldr	r0, [pc, #128]	; (800473c <HAL_UART_MspInit+0xf0>)
 80046ba:	f7fc f959 	bl	8000970 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80046be:	2200      	movs	r2, #0
 80046c0:	2100      	movs	r1, #0
 80046c2:	2034      	movs	r0, #52	; 0x34
 80046c4:	f7fc f8e2 	bl	800088c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80046c8:	2034      	movs	r0, #52	; 0x34
 80046ca:	f7fc f90b 	bl	80008e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80046ce:	e02d      	b.n	800472c <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a1a      	ldr	r2, [pc, #104]	; (8004740 <HAL_UART_MspInit+0xf4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d128      	bne.n	800472c <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80046da:	4b17      	ldr	r3, [pc, #92]	; (8004738 <HAL_UART_MspInit+0xec>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	4a16      	ldr	r2, [pc, #88]	; (8004738 <HAL_UART_MspInit+0xec>)
 80046e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_UART_MspInit+0xec>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <HAL_UART_MspInit+0xec>)
 80046f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f6:	4a10      	ldr	r2, [pc, #64]	; (8004738 <HAL_UART_MspInit+0xec>)
 80046f8:	f043 0308 	orr.w	r3, r3, #8
 80046fc:	6313      	str	r3, [r2, #48]	; 0x30
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_UART_MspInit+0xec>)
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	60fb      	str	r3, [r7, #12]
 8004708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800470a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800470e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004718:	2303      	movs	r3, #3
 800471a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800471c:	2307      	movs	r3, #7
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004720:	f107 031c 	add.w	r3, r7, #28
 8004724:	4619      	mov	r1, r3
 8004726:	4805      	ldr	r0, [pc, #20]	; (800473c <HAL_UART_MspInit+0xf0>)
 8004728:	f7fc f922 	bl	8000970 <HAL_GPIO_Init>
}
 800472c:	bf00      	nop
 800472e:	3730      	adds	r7, #48	; 0x30
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40004c00 	.word	0x40004c00
 8004738:	40023800 	.word	0x40023800
 800473c:	40020c00 	.word	0x40020c00
 8004740:	40004800 	.word	0x40004800

08004744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004744:	b480      	push	{r7}
 8004746:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004752:	b480      	push	{r7}
 8004754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004756:	e7fe      	b.n	8004756 <HardFault_Handler+0x4>

08004758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800475c:	e7fe      	b.n	800475c <MemManage_Handler+0x4>

0800475e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800475e:	b480      	push	{r7}
 8004760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004762:	e7fe      	b.n	8004762 <BusFault_Handler+0x4>

08004764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004768:	e7fe      	b.n	8004768 <UsageFault_Handler+0x4>

0800476a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800476a:	b480      	push	{r7}
 800476c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004778:	b480      	push	{r7}
 800477a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800477c:	bf00      	nop
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004786:	b480      	push	{r7}
 8004788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004798:	f7fb ff68 	bl	800066c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800479c:	bf00      	nop
 800479e:	bd80      	pop	{r7, pc}

080047a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80047a4:	4802      	ldr	r0, [pc, #8]	; (80047b0 <UART4_IRQHandler+0x10>)
 80047a6:	f7fe fd71 	bl	800328c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80047aa:	bf00      	nop
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20000324 	.word	0x20000324

080047b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047bc:	4b11      	ldr	r3, [pc, #68]	; (8004804 <_sbrk+0x50>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d102      	bne.n	80047ca <_sbrk+0x16>
		heap_end = &end;
 80047c4:	4b0f      	ldr	r3, [pc, #60]	; (8004804 <_sbrk+0x50>)
 80047c6:	4a10      	ldr	r2, [pc, #64]	; (8004808 <_sbrk+0x54>)
 80047c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047ca:	4b0e      	ldr	r3, [pc, #56]	; (8004804 <_sbrk+0x50>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047d0:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <_sbrk+0x50>)
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	466a      	mov	r2, sp
 80047da:	4293      	cmp	r3, r2
 80047dc:	d907      	bls.n	80047ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047de:	f000 f875 	bl	80048cc <__errno>
 80047e2:	4602      	mov	r2, r0
 80047e4:	230c      	movs	r3, #12
 80047e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047ec:	e006      	b.n	80047fc <_sbrk+0x48>
	}

	heap_end += incr;
 80047ee:	4b05      	ldr	r3, [pc, #20]	; (8004804 <_sbrk+0x50>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4413      	add	r3, r2
 80047f6:	4a03      	ldr	r2, [pc, #12]	; (8004804 <_sbrk+0x50>)
 80047f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047fa:	68fb      	ldr	r3, [r7, #12]
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000008c 	.word	0x2000008c
 8004808:	200003a8 	.word	0x200003a8

0800480c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004810:	4b15      	ldr	r3, [pc, #84]	; (8004868 <SystemInit+0x5c>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	4a14      	ldr	r2, [pc, #80]	; (8004868 <SystemInit+0x5c>)
 8004818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800481c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004820:	4b12      	ldr	r3, [pc, #72]	; (800486c <SystemInit+0x60>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <SystemInit+0x60>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <SystemInit+0x60>)
 800482e:	2200      	movs	r2, #0
 8004830:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004832:	4b0e      	ldr	r3, [pc, #56]	; (800486c <SystemInit+0x60>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	490d      	ldr	r1, [pc, #52]	; (800486c <SystemInit+0x60>)
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <SystemInit+0x64>)
 800483a:	4013      	ands	r3, r2
 800483c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800483e:	4b0b      	ldr	r3, [pc, #44]	; (800486c <SystemInit+0x60>)
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <SystemInit+0x68>)
 8004842:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004844:	4b09      	ldr	r3, [pc, #36]	; (800486c <SystemInit+0x60>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a08      	ldr	r2, [pc, #32]	; (800486c <SystemInit+0x60>)
 800484a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004850:	4b06      	ldr	r3, [pc, #24]	; (800486c <SystemInit+0x60>)
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004856:	4b04      	ldr	r3, [pc, #16]	; (8004868 <SystemInit+0x5c>)
 8004858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800485c:	609a      	str	r2, [r3, #8]
#endif
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	40023800 	.word	0x40023800
 8004870:	fef6ffff 	.word	0xfef6ffff
 8004874:	24003010 	.word	0x24003010

08004878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800487c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800487e:	e003      	b.n	8004888 <LoopCopyDataInit>

08004880 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004880:	4b0c      	ldr	r3, [pc, #48]	; (80048b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004882:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004884:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004886:	3104      	adds	r1, #4

08004888 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004888:	480b      	ldr	r0, [pc, #44]	; (80048b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800488a:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800488c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800488e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004890:	d3f6      	bcc.n	8004880 <CopyDataInit>
  ldr  r2, =_sbss
 8004892:	4a0b      	ldr	r2, [pc, #44]	; (80048c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004894:	e002      	b.n	800489c <LoopFillZerobss>

08004896 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004896:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004898:	f842 3b04 	str.w	r3, [r2], #4

0800489c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800489c:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800489e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048a0:	d3f9      	bcc.n	8004896 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048a2:	f7ff ffb3 	bl	800480c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048a6:	f000 f817 	bl	80048d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048aa:	f7ff fc8c 	bl	80041c6 <main>
  bx  lr    
 80048ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048b0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80048b4:	08005324 	.word	0x08005324
  ldr  r0, =_sdata
 80048b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048bc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80048c0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80048c4:	200003a8 	.word	0x200003a8

080048c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048c8:	e7fe      	b.n	80048c8 <ADC_IRQHandler>
	...

080048cc <__errno>:
 80048cc:	4b01      	ldr	r3, [pc, #4]	; (80048d4 <__errno+0x8>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	2000000c 	.word	0x2000000c

080048d8 <__libc_init_array>:
 80048d8:	b570      	push	{r4, r5, r6, lr}
 80048da:	4e0d      	ldr	r6, [pc, #52]	; (8004910 <__libc_init_array+0x38>)
 80048dc:	4c0d      	ldr	r4, [pc, #52]	; (8004914 <__libc_init_array+0x3c>)
 80048de:	1ba4      	subs	r4, r4, r6
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	2500      	movs	r5, #0
 80048e4:	42a5      	cmp	r5, r4
 80048e6:	d109      	bne.n	80048fc <__libc_init_array+0x24>
 80048e8:	4e0b      	ldr	r6, [pc, #44]	; (8004918 <__libc_init_array+0x40>)
 80048ea:	4c0c      	ldr	r4, [pc, #48]	; (800491c <__libc_init_array+0x44>)
 80048ec:	f000 fc26 	bl	800513c <_init>
 80048f0:	1ba4      	subs	r4, r4, r6
 80048f2:	10a4      	asrs	r4, r4, #2
 80048f4:	2500      	movs	r5, #0
 80048f6:	42a5      	cmp	r5, r4
 80048f8:	d105      	bne.n	8004906 <__libc_init_array+0x2e>
 80048fa:	bd70      	pop	{r4, r5, r6, pc}
 80048fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004900:	4798      	blx	r3
 8004902:	3501      	adds	r5, #1
 8004904:	e7ee      	b.n	80048e4 <__libc_init_array+0xc>
 8004906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800490a:	4798      	blx	r3
 800490c:	3501      	adds	r5, #1
 800490e:	e7f2      	b.n	80048f6 <__libc_init_array+0x1e>
 8004910:	0800531c 	.word	0x0800531c
 8004914:	0800531c 	.word	0x0800531c
 8004918:	0800531c 	.word	0x0800531c
 800491c:	08005320 	.word	0x08005320

08004920 <memset>:
 8004920:	4402      	add	r2, r0
 8004922:	4603      	mov	r3, r0
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <memset+0xa>
 8004928:	4770      	bx	lr
 800492a:	f803 1b01 	strb.w	r1, [r3], #1
 800492e:	e7f9      	b.n	8004924 <memset+0x4>

08004930 <siprintf>:
 8004930:	b40e      	push	{r1, r2, r3}
 8004932:	b500      	push	{lr}
 8004934:	b09c      	sub	sp, #112	; 0x70
 8004936:	ab1d      	add	r3, sp, #116	; 0x74
 8004938:	9002      	str	r0, [sp, #8]
 800493a:	9006      	str	r0, [sp, #24]
 800493c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004940:	4809      	ldr	r0, [pc, #36]	; (8004968 <siprintf+0x38>)
 8004942:	9107      	str	r1, [sp, #28]
 8004944:	9104      	str	r1, [sp, #16]
 8004946:	4909      	ldr	r1, [pc, #36]	; (800496c <siprintf+0x3c>)
 8004948:	f853 2b04 	ldr.w	r2, [r3], #4
 800494c:	9105      	str	r1, [sp, #20]
 800494e:	6800      	ldr	r0, [r0, #0]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	a902      	add	r1, sp, #8
 8004954:	f000 f866 	bl	8004a24 <_svfiprintf_r>
 8004958:	9b02      	ldr	r3, [sp, #8]
 800495a:	2200      	movs	r2, #0
 800495c:	701a      	strb	r2, [r3, #0]
 800495e:	b01c      	add	sp, #112	; 0x70
 8004960:	f85d eb04 	ldr.w	lr, [sp], #4
 8004964:	b003      	add	sp, #12
 8004966:	4770      	bx	lr
 8004968:	2000000c 	.word	0x2000000c
 800496c:	ffff0208 	.word	0xffff0208

08004970 <__ssputs_r>:
 8004970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	688e      	ldr	r6, [r1, #8]
 8004976:	429e      	cmp	r6, r3
 8004978:	4682      	mov	sl, r0
 800497a:	460c      	mov	r4, r1
 800497c:	4690      	mov	r8, r2
 800497e:	4699      	mov	r9, r3
 8004980:	d837      	bhi.n	80049f2 <__ssputs_r+0x82>
 8004982:	898a      	ldrh	r2, [r1, #12]
 8004984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004988:	d031      	beq.n	80049ee <__ssputs_r+0x7e>
 800498a:	6825      	ldr	r5, [r4, #0]
 800498c:	6909      	ldr	r1, [r1, #16]
 800498e:	1a6f      	subs	r7, r5, r1
 8004990:	6965      	ldr	r5, [r4, #20]
 8004992:	2302      	movs	r3, #2
 8004994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004998:	fb95 f5f3 	sdiv	r5, r5, r3
 800499c:	f109 0301 	add.w	r3, r9, #1
 80049a0:	443b      	add	r3, r7
 80049a2:	429d      	cmp	r5, r3
 80049a4:	bf38      	it	cc
 80049a6:	461d      	movcc	r5, r3
 80049a8:	0553      	lsls	r3, r2, #21
 80049aa:	d530      	bpl.n	8004a0e <__ssputs_r+0x9e>
 80049ac:	4629      	mov	r1, r5
 80049ae:	f000 fb2b 	bl	8005008 <_malloc_r>
 80049b2:	4606      	mov	r6, r0
 80049b4:	b950      	cbnz	r0, 80049cc <__ssputs_r+0x5c>
 80049b6:	230c      	movs	r3, #12
 80049b8:	f8ca 3000 	str.w	r3, [sl]
 80049bc:	89a3      	ldrh	r3, [r4, #12]
 80049be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c2:	81a3      	strh	r3, [r4, #12]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049cc:	463a      	mov	r2, r7
 80049ce:	6921      	ldr	r1, [r4, #16]
 80049d0:	f000 faa8 	bl	8004f24 <memcpy>
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049de:	81a3      	strh	r3, [r4, #12]
 80049e0:	6126      	str	r6, [r4, #16]
 80049e2:	6165      	str	r5, [r4, #20]
 80049e4:	443e      	add	r6, r7
 80049e6:	1bed      	subs	r5, r5, r7
 80049e8:	6026      	str	r6, [r4, #0]
 80049ea:	60a5      	str	r5, [r4, #8]
 80049ec:	464e      	mov	r6, r9
 80049ee:	454e      	cmp	r6, r9
 80049f0:	d900      	bls.n	80049f4 <__ssputs_r+0x84>
 80049f2:	464e      	mov	r6, r9
 80049f4:	4632      	mov	r2, r6
 80049f6:	4641      	mov	r1, r8
 80049f8:	6820      	ldr	r0, [r4, #0]
 80049fa:	f000 fa9e 	bl	8004f3a <memmove>
 80049fe:	68a3      	ldr	r3, [r4, #8]
 8004a00:	1b9b      	subs	r3, r3, r6
 8004a02:	60a3      	str	r3, [r4, #8]
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	441e      	add	r6, r3
 8004a08:	6026      	str	r6, [r4, #0]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	e7dc      	b.n	80049c8 <__ssputs_r+0x58>
 8004a0e:	462a      	mov	r2, r5
 8004a10:	f000 fb54 	bl	80050bc <_realloc_r>
 8004a14:	4606      	mov	r6, r0
 8004a16:	2800      	cmp	r0, #0
 8004a18:	d1e2      	bne.n	80049e0 <__ssputs_r+0x70>
 8004a1a:	6921      	ldr	r1, [r4, #16]
 8004a1c:	4650      	mov	r0, sl
 8004a1e:	f000 faa5 	bl	8004f6c <_free_r>
 8004a22:	e7c8      	b.n	80049b6 <__ssputs_r+0x46>

08004a24 <_svfiprintf_r>:
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	461d      	mov	r5, r3
 8004a2a:	898b      	ldrh	r3, [r1, #12]
 8004a2c:	061f      	lsls	r7, r3, #24
 8004a2e:	b09d      	sub	sp, #116	; 0x74
 8004a30:	4680      	mov	r8, r0
 8004a32:	460c      	mov	r4, r1
 8004a34:	4616      	mov	r6, r2
 8004a36:	d50f      	bpl.n	8004a58 <_svfiprintf_r+0x34>
 8004a38:	690b      	ldr	r3, [r1, #16]
 8004a3a:	b96b      	cbnz	r3, 8004a58 <_svfiprintf_r+0x34>
 8004a3c:	2140      	movs	r1, #64	; 0x40
 8004a3e:	f000 fae3 	bl	8005008 <_malloc_r>
 8004a42:	6020      	str	r0, [r4, #0]
 8004a44:	6120      	str	r0, [r4, #16]
 8004a46:	b928      	cbnz	r0, 8004a54 <_svfiprintf_r+0x30>
 8004a48:	230c      	movs	r3, #12
 8004a4a:	f8c8 3000 	str.w	r3, [r8]
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a52:	e0c8      	b.n	8004be6 <_svfiprintf_r+0x1c2>
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	6163      	str	r3, [r4, #20]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a62:	2330      	movs	r3, #48	; 0x30
 8004a64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a68:	9503      	str	r5, [sp, #12]
 8004a6a:	f04f 0b01 	mov.w	fp, #1
 8004a6e:	4637      	mov	r7, r6
 8004a70:	463d      	mov	r5, r7
 8004a72:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a76:	b10b      	cbz	r3, 8004a7c <_svfiprintf_r+0x58>
 8004a78:	2b25      	cmp	r3, #37	; 0x25
 8004a7a:	d13e      	bne.n	8004afa <_svfiprintf_r+0xd6>
 8004a7c:	ebb7 0a06 	subs.w	sl, r7, r6
 8004a80:	d00b      	beq.n	8004a9a <_svfiprintf_r+0x76>
 8004a82:	4653      	mov	r3, sl
 8004a84:	4632      	mov	r2, r6
 8004a86:	4621      	mov	r1, r4
 8004a88:	4640      	mov	r0, r8
 8004a8a:	f7ff ff71 	bl	8004970 <__ssputs_r>
 8004a8e:	3001      	adds	r0, #1
 8004a90:	f000 80a4 	beq.w	8004bdc <_svfiprintf_r+0x1b8>
 8004a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a96:	4453      	add	r3, sl
 8004a98:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9a:	783b      	ldrb	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 809d 	beq.w	8004bdc <_svfiprintf_r+0x1b8>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004aa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004aac:	9304      	str	r3, [sp, #16]
 8004aae:	9307      	str	r3, [sp, #28]
 8004ab0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ab4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ab6:	462f      	mov	r7, r5
 8004ab8:	2205      	movs	r2, #5
 8004aba:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004abe:	4850      	ldr	r0, [pc, #320]	; (8004c00 <_svfiprintf_r+0x1dc>)
 8004ac0:	f7fb fbc6 	bl	8000250 <memchr>
 8004ac4:	9b04      	ldr	r3, [sp, #16]
 8004ac6:	b9d0      	cbnz	r0, 8004afe <_svfiprintf_r+0xda>
 8004ac8:	06d9      	lsls	r1, r3, #27
 8004aca:	bf44      	itt	mi
 8004acc:	2220      	movmi	r2, #32
 8004ace:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004ad2:	071a      	lsls	r2, r3, #28
 8004ad4:	bf44      	itt	mi
 8004ad6:	222b      	movmi	r2, #43	; 0x2b
 8004ad8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004adc:	782a      	ldrb	r2, [r5, #0]
 8004ade:	2a2a      	cmp	r2, #42	; 0x2a
 8004ae0:	d015      	beq.n	8004b0e <_svfiprintf_r+0xea>
 8004ae2:	9a07      	ldr	r2, [sp, #28]
 8004ae4:	462f      	mov	r7, r5
 8004ae6:	2000      	movs	r0, #0
 8004ae8:	250a      	movs	r5, #10
 8004aea:	4639      	mov	r1, r7
 8004aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004af0:	3b30      	subs	r3, #48	; 0x30
 8004af2:	2b09      	cmp	r3, #9
 8004af4:	d94d      	bls.n	8004b92 <_svfiprintf_r+0x16e>
 8004af6:	b1b8      	cbz	r0, 8004b28 <_svfiprintf_r+0x104>
 8004af8:	e00f      	b.n	8004b1a <_svfiprintf_r+0xf6>
 8004afa:	462f      	mov	r7, r5
 8004afc:	e7b8      	b.n	8004a70 <_svfiprintf_r+0x4c>
 8004afe:	4a40      	ldr	r2, [pc, #256]	; (8004c00 <_svfiprintf_r+0x1dc>)
 8004b00:	1a80      	subs	r0, r0, r2
 8004b02:	fa0b f000 	lsl.w	r0, fp, r0
 8004b06:	4318      	orrs	r0, r3
 8004b08:	9004      	str	r0, [sp, #16]
 8004b0a:	463d      	mov	r5, r7
 8004b0c:	e7d3      	b.n	8004ab6 <_svfiprintf_r+0x92>
 8004b0e:	9a03      	ldr	r2, [sp, #12]
 8004b10:	1d11      	adds	r1, r2, #4
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	9103      	str	r1, [sp, #12]
 8004b16:	2a00      	cmp	r2, #0
 8004b18:	db01      	blt.n	8004b1e <_svfiprintf_r+0xfa>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e004      	b.n	8004b28 <_svfiprintf_r+0x104>
 8004b1e:	4252      	negs	r2, r2
 8004b20:	f043 0302 	orr.w	r3, r3, #2
 8004b24:	9207      	str	r2, [sp, #28]
 8004b26:	9304      	str	r3, [sp, #16]
 8004b28:	783b      	ldrb	r3, [r7, #0]
 8004b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b2c:	d10c      	bne.n	8004b48 <_svfiprintf_r+0x124>
 8004b2e:	787b      	ldrb	r3, [r7, #1]
 8004b30:	2b2a      	cmp	r3, #42	; 0x2a
 8004b32:	d133      	bne.n	8004b9c <_svfiprintf_r+0x178>
 8004b34:	9b03      	ldr	r3, [sp, #12]
 8004b36:	1d1a      	adds	r2, r3, #4
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	9203      	str	r2, [sp, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	bfb8      	it	lt
 8004b40:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004b44:	3702      	adds	r7, #2
 8004b46:	9305      	str	r3, [sp, #20]
 8004b48:	4d2e      	ldr	r5, [pc, #184]	; (8004c04 <_svfiprintf_r+0x1e0>)
 8004b4a:	7839      	ldrb	r1, [r7, #0]
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fb fb7e 	bl	8000250 <memchr>
 8004b54:	b138      	cbz	r0, 8004b66 <_svfiprintf_r+0x142>
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	1b40      	subs	r0, r0, r5
 8004b5a:	fa03 f000 	lsl.w	r0, r3, r0
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	4303      	orrs	r3, r0
 8004b62:	3701      	adds	r7, #1
 8004b64:	9304      	str	r3, [sp, #16]
 8004b66:	7839      	ldrb	r1, [r7, #0]
 8004b68:	4827      	ldr	r0, [pc, #156]	; (8004c08 <_svfiprintf_r+0x1e4>)
 8004b6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b6e:	2206      	movs	r2, #6
 8004b70:	1c7e      	adds	r6, r7, #1
 8004b72:	f7fb fb6d 	bl	8000250 <memchr>
 8004b76:	2800      	cmp	r0, #0
 8004b78:	d038      	beq.n	8004bec <_svfiprintf_r+0x1c8>
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <_svfiprintf_r+0x1e8>)
 8004b7c:	bb13      	cbnz	r3, 8004bc4 <_svfiprintf_r+0x1a0>
 8004b7e:	9b03      	ldr	r3, [sp, #12]
 8004b80:	3307      	adds	r3, #7
 8004b82:	f023 0307 	bic.w	r3, r3, #7
 8004b86:	3308      	adds	r3, #8
 8004b88:	9303      	str	r3, [sp, #12]
 8004b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8c:	444b      	add	r3, r9
 8004b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b90:	e76d      	b.n	8004a6e <_svfiprintf_r+0x4a>
 8004b92:	fb05 3202 	mla	r2, r5, r2, r3
 8004b96:	2001      	movs	r0, #1
 8004b98:	460f      	mov	r7, r1
 8004b9a:	e7a6      	b.n	8004aea <_svfiprintf_r+0xc6>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	3701      	adds	r7, #1
 8004ba0:	9305      	str	r3, [sp, #20]
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	250a      	movs	r5, #10
 8004ba6:	4638      	mov	r0, r7
 8004ba8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bac:	3a30      	subs	r2, #48	; 0x30
 8004bae:	2a09      	cmp	r2, #9
 8004bb0:	d903      	bls.n	8004bba <_svfiprintf_r+0x196>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0c8      	beq.n	8004b48 <_svfiprintf_r+0x124>
 8004bb6:	9105      	str	r1, [sp, #20]
 8004bb8:	e7c6      	b.n	8004b48 <_svfiprintf_r+0x124>
 8004bba:	fb05 2101 	mla	r1, r5, r1, r2
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	e7f0      	b.n	8004ba6 <_svfiprintf_r+0x182>
 8004bc4:	ab03      	add	r3, sp, #12
 8004bc6:	9300      	str	r3, [sp, #0]
 8004bc8:	4622      	mov	r2, r4
 8004bca:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <_svfiprintf_r+0x1ec>)
 8004bcc:	a904      	add	r1, sp, #16
 8004bce:	4640      	mov	r0, r8
 8004bd0:	f3af 8000 	nop.w
 8004bd4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004bd8:	4681      	mov	r9, r0
 8004bda:	d1d6      	bne.n	8004b8a <_svfiprintf_r+0x166>
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	065b      	lsls	r3, r3, #25
 8004be0:	f53f af35 	bmi.w	8004a4e <_svfiprintf_r+0x2a>
 8004be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004be6:	b01d      	add	sp, #116	; 0x74
 8004be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bec:	ab03      	add	r3, sp, #12
 8004bee:	9300      	str	r3, [sp, #0]
 8004bf0:	4622      	mov	r2, r4
 8004bf2:	4b07      	ldr	r3, [pc, #28]	; (8004c10 <_svfiprintf_r+0x1ec>)
 8004bf4:	a904      	add	r1, sp, #16
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	f000 f882 	bl	8004d00 <_printf_i>
 8004bfc:	e7ea      	b.n	8004bd4 <_svfiprintf_r+0x1b0>
 8004bfe:	bf00      	nop
 8004c00:	080052e0 	.word	0x080052e0
 8004c04:	080052e6 	.word	0x080052e6
 8004c08:	080052ea 	.word	0x080052ea
 8004c0c:	00000000 	.word	0x00000000
 8004c10:	08004971 	.word	0x08004971

08004c14 <_printf_common>:
 8004c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c18:	4691      	mov	r9, r2
 8004c1a:	461f      	mov	r7, r3
 8004c1c:	688a      	ldr	r2, [r1, #8]
 8004c1e:	690b      	ldr	r3, [r1, #16]
 8004c20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c24:	4293      	cmp	r3, r2
 8004c26:	bfb8      	it	lt
 8004c28:	4613      	movlt	r3, r2
 8004c2a:	f8c9 3000 	str.w	r3, [r9]
 8004c2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c32:	4606      	mov	r6, r0
 8004c34:	460c      	mov	r4, r1
 8004c36:	b112      	cbz	r2, 8004c3e <_printf_common+0x2a>
 8004c38:	3301      	adds	r3, #1
 8004c3a:	f8c9 3000 	str.w	r3, [r9]
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	0699      	lsls	r1, r3, #26
 8004c42:	bf42      	ittt	mi
 8004c44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c48:	3302      	addmi	r3, #2
 8004c4a:	f8c9 3000 	strmi.w	r3, [r9]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	f015 0506 	ands.w	r5, r5, #6
 8004c54:	d107      	bne.n	8004c66 <_printf_common+0x52>
 8004c56:	f104 0a19 	add.w	sl, r4, #25
 8004c5a:	68e3      	ldr	r3, [r4, #12]
 8004c5c:	f8d9 2000 	ldr.w	r2, [r9]
 8004c60:	1a9b      	subs	r3, r3, r2
 8004c62:	42ab      	cmp	r3, r5
 8004c64:	dc28      	bgt.n	8004cb8 <_printf_common+0xa4>
 8004c66:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c6a:	6822      	ldr	r2, [r4, #0]
 8004c6c:	3300      	adds	r3, #0
 8004c6e:	bf18      	it	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	0692      	lsls	r2, r2, #26
 8004c74:	d42d      	bmi.n	8004cd2 <_printf_common+0xbe>
 8004c76:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c7a:	4639      	mov	r1, r7
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	47c0      	blx	r8
 8004c80:	3001      	adds	r0, #1
 8004c82:	d020      	beq.n	8004cc6 <_printf_common+0xb2>
 8004c84:	6823      	ldr	r3, [r4, #0]
 8004c86:	68e5      	ldr	r5, [r4, #12]
 8004c88:	f8d9 2000 	ldr.w	r2, [r9]
 8004c8c:	f003 0306 	and.w	r3, r3, #6
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	bf08      	it	eq
 8004c94:	1aad      	subeq	r5, r5, r2
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	6922      	ldr	r2, [r4, #16]
 8004c9a:	bf0c      	ite	eq
 8004c9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ca0:	2500      	movne	r5, #0
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	bfc4      	itt	gt
 8004ca6:	1a9b      	subgt	r3, r3, r2
 8004ca8:	18ed      	addgt	r5, r5, r3
 8004caa:	f04f 0900 	mov.w	r9, #0
 8004cae:	341a      	adds	r4, #26
 8004cb0:	454d      	cmp	r5, r9
 8004cb2:	d11a      	bne.n	8004cea <_printf_common+0xd6>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e008      	b.n	8004cca <_printf_common+0xb6>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	4652      	mov	r2, sl
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	47c0      	blx	r8
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d103      	bne.n	8004cce <_printf_common+0xba>
 8004cc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cce:	3501      	adds	r5, #1
 8004cd0:	e7c3      	b.n	8004c5a <_printf_common+0x46>
 8004cd2:	18e1      	adds	r1, r4, r3
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	2030      	movs	r0, #48	; 0x30
 8004cd8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cdc:	4422      	add	r2, r4
 8004cde:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ce2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ce6:	3302      	adds	r3, #2
 8004ce8:	e7c5      	b.n	8004c76 <_printf_common+0x62>
 8004cea:	2301      	movs	r3, #1
 8004cec:	4622      	mov	r2, r4
 8004cee:	4639      	mov	r1, r7
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	47c0      	blx	r8
 8004cf4:	3001      	adds	r0, #1
 8004cf6:	d0e6      	beq.n	8004cc6 <_printf_common+0xb2>
 8004cf8:	f109 0901 	add.w	r9, r9, #1
 8004cfc:	e7d8      	b.n	8004cb0 <_printf_common+0x9c>
	...

08004d00 <_printf_i>:
 8004d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d04:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d08:	460c      	mov	r4, r1
 8004d0a:	7e09      	ldrb	r1, [r1, #24]
 8004d0c:	b085      	sub	sp, #20
 8004d0e:	296e      	cmp	r1, #110	; 0x6e
 8004d10:	4617      	mov	r7, r2
 8004d12:	4606      	mov	r6, r0
 8004d14:	4698      	mov	r8, r3
 8004d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d18:	f000 80b3 	beq.w	8004e82 <_printf_i+0x182>
 8004d1c:	d822      	bhi.n	8004d64 <_printf_i+0x64>
 8004d1e:	2963      	cmp	r1, #99	; 0x63
 8004d20:	d036      	beq.n	8004d90 <_printf_i+0x90>
 8004d22:	d80a      	bhi.n	8004d3a <_printf_i+0x3a>
 8004d24:	2900      	cmp	r1, #0
 8004d26:	f000 80b9 	beq.w	8004e9c <_printf_i+0x19c>
 8004d2a:	2958      	cmp	r1, #88	; 0x58
 8004d2c:	f000 8083 	beq.w	8004e36 <_printf_i+0x136>
 8004d30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d34:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d38:	e032      	b.n	8004da0 <_printf_i+0xa0>
 8004d3a:	2964      	cmp	r1, #100	; 0x64
 8004d3c:	d001      	beq.n	8004d42 <_printf_i+0x42>
 8004d3e:	2969      	cmp	r1, #105	; 0x69
 8004d40:	d1f6      	bne.n	8004d30 <_printf_i+0x30>
 8004d42:	6820      	ldr	r0, [r4, #0]
 8004d44:	6813      	ldr	r3, [r2, #0]
 8004d46:	0605      	lsls	r5, r0, #24
 8004d48:	f103 0104 	add.w	r1, r3, #4
 8004d4c:	d52a      	bpl.n	8004da4 <_printf_i+0xa4>
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da03      	bge.n	8004d5e <_printf_i+0x5e>
 8004d56:	222d      	movs	r2, #45	; 0x2d
 8004d58:	425b      	negs	r3, r3
 8004d5a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d5e:	486f      	ldr	r0, [pc, #444]	; (8004f1c <_printf_i+0x21c>)
 8004d60:	220a      	movs	r2, #10
 8004d62:	e039      	b.n	8004dd8 <_printf_i+0xd8>
 8004d64:	2973      	cmp	r1, #115	; 0x73
 8004d66:	f000 809d 	beq.w	8004ea4 <_printf_i+0x1a4>
 8004d6a:	d808      	bhi.n	8004d7e <_printf_i+0x7e>
 8004d6c:	296f      	cmp	r1, #111	; 0x6f
 8004d6e:	d020      	beq.n	8004db2 <_printf_i+0xb2>
 8004d70:	2970      	cmp	r1, #112	; 0x70
 8004d72:	d1dd      	bne.n	8004d30 <_printf_i+0x30>
 8004d74:	6823      	ldr	r3, [r4, #0]
 8004d76:	f043 0320 	orr.w	r3, r3, #32
 8004d7a:	6023      	str	r3, [r4, #0]
 8004d7c:	e003      	b.n	8004d86 <_printf_i+0x86>
 8004d7e:	2975      	cmp	r1, #117	; 0x75
 8004d80:	d017      	beq.n	8004db2 <_printf_i+0xb2>
 8004d82:	2978      	cmp	r1, #120	; 0x78
 8004d84:	d1d4      	bne.n	8004d30 <_printf_i+0x30>
 8004d86:	2378      	movs	r3, #120	; 0x78
 8004d88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004d8c:	4864      	ldr	r0, [pc, #400]	; (8004f20 <_printf_i+0x220>)
 8004d8e:	e055      	b.n	8004e3c <_printf_i+0x13c>
 8004d90:	6813      	ldr	r3, [r2, #0]
 8004d92:	1d19      	adds	r1, r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6011      	str	r1, [r2, #0]
 8004d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004da0:	2301      	movs	r3, #1
 8004da2:	e08c      	b.n	8004ebe <_printf_i+0x1be>
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6011      	str	r1, [r2, #0]
 8004da8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dac:	bf18      	it	ne
 8004dae:	b21b      	sxthne	r3, r3
 8004db0:	e7cf      	b.n	8004d52 <_printf_i+0x52>
 8004db2:	6813      	ldr	r3, [r2, #0]
 8004db4:	6825      	ldr	r5, [r4, #0]
 8004db6:	1d18      	adds	r0, r3, #4
 8004db8:	6010      	str	r0, [r2, #0]
 8004dba:	0628      	lsls	r0, r5, #24
 8004dbc:	d501      	bpl.n	8004dc2 <_printf_i+0xc2>
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	e002      	b.n	8004dc8 <_printf_i+0xc8>
 8004dc2:	0668      	lsls	r0, r5, #25
 8004dc4:	d5fb      	bpl.n	8004dbe <_printf_i+0xbe>
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	4854      	ldr	r0, [pc, #336]	; (8004f1c <_printf_i+0x21c>)
 8004dca:	296f      	cmp	r1, #111	; 0x6f
 8004dcc:	bf14      	ite	ne
 8004dce:	220a      	movne	r2, #10
 8004dd0:	2208      	moveq	r2, #8
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dd8:	6865      	ldr	r5, [r4, #4]
 8004dda:	60a5      	str	r5, [r4, #8]
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	f2c0 8095 	blt.w	8004f0c <_printf_i+0x20c>
 8004de2:	6821      	ldr	r1, [r4, #0]
 8004de4:	f021 0104 	bic.w	r1, r1, #4
 8004de8:	6021      	str	r1, [r4, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13d      	bne.n	8004e6a <_printf_i+0x16a>
 8004dee:	2d00      	cmp	r5, #0
 8004df0:	f040 808e 	bne.w	8004f10 <_printf_i+0x210>
 8004df4:	4665      	mov	r5, ip
 8004df6:	2a08      	cmp	r2, #8
 8004df8:	d10b      	bne.n	8004e12 <_printf_i+0x112>
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	07db      	lsls	r3, r3, #31
 8004dfe:	d508      	bpl.n	8004e12 <_printf_i+0x112>
 8004e00:	6923      	ldr	r3, [r4, #16]
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	bfde      	ittt	le
 8004e08:	2330      	movle	r3, #48	; 0x30
 8004e0a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e0e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004e12:	ebac 0305 	sub.w	r3, ip, r5
 8004e16:	6123      	str	r3, [r4, #16]
 8004e18:	f8cd 8000 	str.w	r8, [sp]
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	aa03      	add	r2, sp, #12
 8004e20:	4621      	mov	r1, r4
 8004e22:	4630      	mov	r0, r6
 8004e24:	f7ff fef6 	bl	8004c14 <_printf_common>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	d14d      	bne.n	8004ec8 <_printf_i+0x1c8>
 8004e2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e30:	b005      	add	sp, #20
 8004e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e36:	4839      	ldr	r0, [pc, #228]	; (8004f1c <_printf_i+0x21c>)
 8004e38:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	6821      	ldr	r1, [r4, #0]
 8004e40:	1d1d      	adds	r5, r3, #4
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6015      	str	r5, [r2, #0]
 8004e46:	060a      	lsls	r2, r1, #24
 8004e48:	d50b      	bpl.n	8004e62 <_printf_i+0x162>
 8004e4a:	07ca      	lsls	r2, r1, #31
 8004e4c:	bf44      	itt	mi
 8004e4e:	f041 0120 	orrmi.w	r1, r1, #32
 8004e52:	6021      	strmi	r1, [r4, #0]
 8004e54:	b91b      	cbnz	r3, 8004e5e <_printf_i+0x15e>
 8004e56:	6822      	ldr	r2, [r4, #0]
 8004e58:	f022 0220 	bic.w	r2, r2, #32
 8004e5c:	6022      	str	r2, [r4, #0]
 8004e5e:	2210      	movs	r2, #16
 8004e60:	e7b7      	b.n	8004dd2 <_printf_i+0xd2>
 8004e62:	064d      	lsls	r5, r1, #25
 8004e64:	bf48      	it	mi
 8004e66:	b29b      	uxthmi	r3, r3
 8004e68:	e7ef      	b.n	8004e4a <_printf_i+0x14a>
 8004e6a:	4665      	mov	r5, ip
 8004e6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e70:	fb02 3311 	mls	r3, r2, r1, r3
 8004e74:	5cc3      	ldrb	r3, [r0, r3]
 8004e76:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	2900      	cmp	r1, #0
 8004e7e:	d1f5      	bne.n	8004e6c <_printf_i+0x16c>
 8004e80:	e7b9      	b.n	8004df6 <_printf_i+0xf6>
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	6961      	ldr	r1, [r4, #20]
 8004e88:	1d18      	adds	r0, r3, #4
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	0628      	lsls	r0, r5, #24
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	d501      	bpl.n	8004e96 <_printf_i+0x196>
 8004e92:	6019      	str	r1, [r3, #0]
 8004e94:	e002      	b.n	8004e9c <_printf_i+0x19c>
 8004e96:	066a      	lsls	r2, r5, #25
 8004e98:	d5fb      	bpl.n	8004e92 <_printf_i+0x192>
 8004e9a:	8019      	strh	r1, [r3, #0]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	4665      	mov	r5, ip
 8004ea2:	e7b9      	b.n	8004e18 <_printf_i+0x118>
 8004ea4:	6813      	ldr	r3, [r2, #0]
 8004ea6:	1d19      	adds	r1, r3, #4
 8004ea8:	6011      	str	r1, [r2, #0]
 8004eaa:	681d      	ldr	r5, [r3, #0]
 8004eac:	6862      	ldr	r2, [r4, #4]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f7fb f9cd 	bl	8000250 <memchr>
 8004eb6:	b108      	cbz	r0, 8004ebc <_printf_i+0x1bc>
 8004eb8:	1b40      	subs	r0, r0, r5
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	6863      	ldr	r3, [r4, #4]
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec6:	e7a7      	b.n	8004e18 <_printf_i+0x118>
 8004ec8:	6923      	ldr	r3, [r4, #16]
 8004eca:	462a      	mov	r2, r5
 8004ecc:	4639      	mov	r1, r7
 8004ece:	4630      	mov	r0, r6
 8004ed0:	47c0      	blx	r8
 8004ed2:	3001      	adds	r0, #1
 8004ed4:	d0aa      	beq.n	8004e2c <_printf_i+0x12c>
 8004ed6:	6823      	ldr	r3, [r4, #0]
 8004ed8:	079b      	lsls	r3, r3, #30
 8004eda:	d413      	bmi.n	8004f04 <_printf_i+0x204>
 8004edc:	68e0      	ldr	r0, [r4, #12]
 8004ede:	9b03      	ldr	r3, [sp, #12]
 8004ee0:	4298      	cmp	r0, r3
 8004ee2:	bfb8      	it	lt
 8004ee4:	4618      	movlt	r0, r3
 8004ee6:	e7a3      	b.n	8004e30 <_printf_i+0x130>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	464a      	mov	r2, r9
 8004eec:	4639      	mov	r1, r7
 8004eee:	4630      	mov	r0, r6
 8004ef0:	47c0      	blx	r8
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d09a      	beq.n	8004e2c <_printf_i+0x12c>
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	9a03      	ldr	r2, [sp, #12]
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	dcf2      	bgt.n	8004ee8 <_printf_i+0x1e8>
 8004f02:	e7eb      	b.n	8004edc <_printf_i+0x1dc>
 8004f04:	2500      	movs	r5, #0
 8004f06:	f104 0919 	add.w	r9, r4, #25
 8004f0a:	e7f5      	b.n	8004ef8 <_printf_i+0x1f8>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ac      	bne.n	8004e6a <_printf_i+0x16a>
 8004f10:	7803      	ldrb	r3, [r0, #0]
 8004f12:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f1a:	e76c      	b.n	8004df6 <_printf_i+0xf6>
 8004f1c:	080052f1 	.word	0x080052f1
 8004f20:	08005302 	.word	0x08005302

08004f24 <memcpy>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	1e43      	subs	r3, r0, #1
 8004f28:	440a      	add	r2, r1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	d100      	bne.n	8004f30 <memcpy+0xc>
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f34:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f38:	e7f7      	b.n	8004f2a <memcpy+0x6>

08004f3a <memmove>:
 8004f3a:	4288      	cmp	r0, r1
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	eb01 0302 	add.w	r3, r1, r2
 8004f42:	d807      	bhi.n	8004f54 <memmove+0x1a>
 8004f44:	1e42      	subs	r2, r0, #1
 8004f46:	4299      	cmp	r1, r3
 8004f48:	d00a      	beq.n	8004f60 <memmove+0x26>
 8004f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f4e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f52:	e7f8      	b.n	8004f46 <memmove+0xc>
 8004f54:	4283      	cmp	r3, r0
 8004f56:	d9f5      	bls.n	8004f44 <memmove+0xa>
 8004f58:	1881      	adds	r1, r0, r2
 8004f5a:	1ad2      	subs	r2, r2, r3
 8004f5c:	42d3      	cmn	r3, r2
 8004f5e:	d100      	bne.n	8004f62 <memmove+0x28>
 8004f60:	bd10      	pop	{r4, pc}
 8004f62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f66:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f6a:	e7f7      	b.n	8004f5c <memmove+0x22>

08004f6c <_free_r>:
 8004f6c:	b538      	push	{r3, r4, r5, lr}
 8004f6e:	4605      	mov	r5, r0
 8004f70:	2900      	cmp	r1, #0
 8004f72:	d045      	beq.n	8005000 <_free_r+0x94>
 8004f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f78:	1f0c      	subs	r4, r1, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	bfb8      	it	lt
 8004f7e:	18e4      	addlt	r4, r4, r3
 8004f80:	f000 f8d2 	bl	8005128 <__malloc_lock>
 8004f84:	4a1f      	ldr	r2, [pc, #124]	; (8005004 <_free_r+0x98>)
 8004f86:	6813      	ldr	r3, [r2, #0]
 8004f88:	4610      	mov	r0, r2
 8004f8a:	b933      	cbnz	r3, 8004f9a <_free_r+0x2e>
 8004f8c:	6063      	str	r3, [r4, #4]
 8004f8e:	6014      	str	r4, [r2, #0]
 8004f90:	4628      	mov	r0, r5
 8004f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f96:	f000 b8c8 	b.w	800512a <__malloc_unlock>
 8004f9a:	42a3      	cmp	r3, r4
 8004f9c:	d90c      	bls.n	8004fb8 <_free_r+0x4c>
 8004f9e:	6821      	ldr	r1, [r4, #0]
 8004fa0:	1862      	adds	r2, r4, r1
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	bf04      	itt	eq
 8004fa6:	681a      	ldreq	r2, [r3, #0]
 8004fa8:	685b      	ldreq	r3, [r3, #4]
 8004faa:	6063      	str	r3, [r4, #4]
 8004fac:	bf04      	itt	eq
 8004fae:	1852      	addeq	r2, r2, r1
 8004fb0:	6022      	streq	r2, [r4, #0]
 8004fb2:	6004      	str	r4, [r0, #0]
 8004fb4:	e7ec      	b.n	8004f90 <_free_r+0x24>
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	b10a      	cbz	r2, 8004fc0 <_free_r+0x54>
 8004fbc:	42a2      	cmp	r2, r4
 8004fbe:	d9fa      	bls.n	8004fb6 <_free_r+0x4a>
 8004fc0:	6819      	ldr	r1, [r3, #0]
 8004fc2:	1858      	adds	r0, r3, r1
 8004fc4:	42a0      	cmp	r0, r4
 8004fc6:	d10b      	bne.n	8004fe0 <_free_r+0x74>
 8004fc8:	6820      	ldr	r0, [r4, #0]
 8004fca:	4401      	add	r1, r0
 8004fcc:	1858      	adds	r0, r3, r1
 8004fce:	4282      	cmp	r2, r0
 8004fd0:	6019      	str	r1, [r3, #0]
 8004fd2:	d1dd      	bne.n	8004f90 <_free_r+0x24>
 8004fd4:	6810      	ldr	r0, [r2, #0]
 8004fd6:	6852      	ldr	r2, [r2, #4]
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	4401      	add	r1, r0
 8004fdc:	6019      	str	r1, [r3, #0]
 8004fde:	e7d7      	b.n	8004f90 <_free_r+0x24>
 8004fe0:	d902      	bls.n	8004fe8 <_free_r+0x7c>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	602b      	str	r3, [r5, #0]
 8004fe6:	e7d3      	b.n	8004f90 <_free_r+0x24>
 8004fe8:	6820      	ldr	r0, [r4, #0]
 8004fea:	1821      	adds	r1, r4, r0
 8004fec:	428a      	cmp	r2, r1
 8004fee:	bf04      	itt	eq
 8004ff0:	6811      	ldreq	r1, [r2, #0]
 8004ff2:	6852      	ldreq	r2, [r2, #4]
 8004ff4:	6062      	str	r2, [r4, #4]
 8004ff6:	bf04      	itt	eq
 8004ff8:	1809      	addeq	r1, r1, r0
 8004ffa:	6021      	streq	r1, [r4, #0]
 8004ffc:	605c      	str	r4, [r3, #4]
 8004ffe:	e7c7      	b.n	8004f90 <_free_r+0x24>
 8005000:	bd38      	pop	{r3, r4, r5, pc}
 8005002:	bf00      	nop
 8005004:	20000090 	.word	0x20000090

08005008 <_malloc_r>:
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	1ccd      	adds	r5, r1, #3
 800500c:	f025 0503 	bic.w	r5, r5, #3
 8005010:	3508      	adds	r5, #8
 8005012:	2d0c      	cmp	r5, #12
 8005014:	bf38      	it	cc
 8005016:	250c      	movcc	r5, #12
 8005018:	2d00      	cmp	r5, #0
 800501a:	4606      	mov	r6, r0
 800501c:	db01      	blt.n	8005022 <_malloc_r+0x1a>
 800501e:	42a9      	cmp	r1, r5
 8005020:	d903      	bls.n	800502a <_malloc_r+0x22>
 8005022:	230c      	movs	r3, #12
 8005024:	6033      	str	r3, [r6, #0]
 8005026:	2000      	movs	r0, #0
 8005028:	bd70      	pop	{r4, r5, r6, pc}
 800502a:	f000 f87d 	bl	8005128 <__malloc_lock>
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <_malloc_r+0xac>)
 8005030:	6814      	ldr	r4, [r2, #0]
 8005032:	4621      	mov	r1, r4
 8005034:	b991      	cbnz	r1, 800505c <_malloc_r+0x54>
 8005036:	4c20      	ldr	r4, [pc, #128]	; (80050b8 <_malloc_r+0xb0>)
 8005038:	6823      	ldr	r3, [r4, #0]
 800503a:	b91b      	cbnz	r3, 8005044 <_malloc_r+0x3c>
 800503c:	4630      	mov	r0, r6
 800503e:	f000 f863 	bl	8005108 <_sbrk_r>
 8005042:	6020      	str	r0, [r4, #0]
 8005044:	4629      	mov	r1, r5
 8005046:	4630      	mov	r0, r6
 8005048:	f000 f85e 	bl	8005108 <_sbrk_r>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	d124      	bne.n	800509a <_malloc_r+0x92>
 8005050:	230c      	movs	r3, #12
 8005052:	6033      	str	r3, [r6, #0]
 8005054:	4630      	mov	r0, r6
 8005056:	f000 f868 	bl	800512a <__malloc_unlock>
 800505a:	e7e4      	b.n	8005026 <_malloc_r+0x1e>
 800505c:	680b      	ldr	r3, [r1, #0]
 800505e:	1b5b      	subs	r3, r3, r5
 8005060:	d418      	bmi.n	8005094 <_malloc_r+0x8c>
 8005062:	2b0b      	cmp	r3, #11
 8005064:	d90f      	bls.n	8005086 <_malloc_r+0x7e>
 8005066:	600b      	str	r3, [r1, #0]
 8005068:	50cd      	str	r5, [r1, r3]
 800506a:	18cc      	adds	r4, r1, r3
 800506c:	4630      	mov	r0, r6
 800506e:	f000 f85c 	bl	800512a <__malloc_unlock>
 8005072:	f104 000b 	add.w	r0, r4, #11
 8005076:	1d23      	adds	r3, r4, #4
 8005078:	f020 0007 	bic.w	r0, r0, #7
 800507c:	1ac3      	subs	r3, r0, r3
 800507e:	d0d3      	beq.n	8005028 <_malloc_r+0x20>
 8005080:	425a      	negs	r2, r3
 8005082:	50e2      	str	r2, [r4, r3]
 8005084:	e7d0      	b.n	8005028 <_malloc_r+0x20>
 8005086:	428c      	cmp	r4, r1
 8005088:	684b      	ldr	r3, [r1, #4]
 800508a:	bf16      	itet	ne
 800508c:	6063      	strne	r3, [r4, #4]
 800508e:	6013      	streq	r3, [r2, #0]
 8005090:	460c      	movne	r4, r1
 8005092:	e7eb      	b.n	800506c <_malloc_r+0x64>
 8005094:	460c      	mov	r4, r1
 8005096:	6849      	ldr	r1, [r1, #4]
 8005098:	e7cc      	b.n	8005034 <_malloc_r+0x2c>
 800509a:	1cc4      	adds	r4, r0, #3
 800509c:	f024 0403 	bic.w	r4, r4, #3
 80050a0:	42a0      	cmp	r0, r4
 80050a2:	d005      	beq.n	80050b0 <_malloc_r+0xa8>
 80050a4:	1a21      	subs	r1, r4, r0
 80050a6:	4630      	mov	r0, r6
 80050a8:	f000 f82e 	bl	8005108 <_sbrk_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d0cf      	beq.n	8005050 <_malloc_r+0x48>
 80050b0:	6025      	str	r5, [r4, #0]
 80050b2:	e7db      	b.n	800506c <_malloc_r+0x64>
 80050b4:	20000090 	.word	0x20000090
 80050b8:	20000094 	.word	0x20000094

080050bc <_realloc_r>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4607      	mov	r7, r0
 80050c0:	4614      	mov	r4, r2
 80050c2:	460e      	mov	r6, r1
 80050c4:	b921      	cbnz	r1, 80050d0 <_realloc_r+0x14>
 80050c6:	4611      	mov	r1, r2
 80050c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050cc:	f7ff bf9c 	b.w	8005008 <_malloc_r>
 80050d0:	b922      	cbnz	r2, 80050dc <_realloc_r+0x20>
 80050d2:	f7ff ff4b 	bl	8004f6c <_free_r>
 80050d6:	4625      	mov	r5, r4
 80050d8:	4628      	mov	r0, r5
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	f000 f826 	bl	800512c <_malloc_usable_size_r>
 80050e0:	42a0      	cmp	r0, r4
 80050e2:	d20f      	bcs.n	8005104 <_realloc_r+0x48>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4638      	mov	r0, r7
 80050e8:	f7ff ff8e 	bl	8005008 <_malloc_r>
 80050ec:	4605      	mov	r5, r0
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0f2      	beq.n	80050d8 <_realloc_r+0x1c>
 80050f2:	4631      	mov	r1, r6
 80050f4:	4622      	mov	r2, r4
 80050f6:	f7ff ff15 	bl	8004f24 <memcpy>
 80050fa:	4631      	mov	r1, r6
 80050fc:	4638      	mov	r0, r7
 80050fe:	f7ff ff35 	bl	8004f6c <_free_r>
 8005102:	e7e9      	b.n	80050d8 <_realloc_r+0x1c>
 8005104:	4635      	mov	r5, r6
 8005106:	e7e7      	b.n	80050d8 <_realloc_r+0x1c>

08005108 <_sbrk_r>:
 8005108:	b538      	push	{r3, r4, r5, lr}
 800510a:	4c06      	ldr	r4, [pc, #24]	; (8005124 <_sbrk_r+0x1c>)
 800510c:	2300      	movs	r3, #0
 800510e:	4605      	mov	r5, r0
 8005110:	4608      	mov	r0, r1
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	f7ff fb4e 	bl	80047b4 <_sbrk>
 8005118:	1c43      	adds	r3, r0, #1
 800511a:	d102      	bne.n	8005122 <_sbrk_r+0x1a>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	b103      	cbz	r3, 8005122 <_sbrk_r+0x1a>
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	bd38      	pop	{r3, r4, r5, pc}
 8005124:	200003a4 	.word	0x200003a4

08005128 <__malloc_lock>:
 8005128:	4770      	bx	lr

0800512a <__malloc_unlock>:
 800512a:	4770      	bx	lr

0800512c <_malloc_usable_size_r>:
 800512c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005130:	1f18      	subs	r0, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	bfbc      	itt	lt
 8005136:	580b      	ldrlt	r3, [r1, r0]
 8005138:	18c0      	addlt	r0, r0, r3
 800513a:	4770      	bx	lr

0800513c <_init>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	bf00      	nop
 8005140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005142:	bc08      	pop	{r3}
 8005144:	469e      	mov	lr, r3
 8005146:	4770      	bx	lr

08005148 <_fini>:
 8005148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514a:	bf00      	nop
 800514c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514e:	bc08      	pop	{r3}
 8005150:	469e      	mov	lr, r3
 8005152:	4770      	bx	lr
